
chdir(/Users/tran/code/dotfiles)
chdir(/etc/xdg//nvim)
chdir(/Users/tran/code/dotfiles)
could not source "/etc/xdg//nvim/sysinit.vim"
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim)
chdir(/Users/tran/code/dotfiles)
could not source "$VIM/sysinit.vim"
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/init.vim"
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/autoload)
chdir(/Users/tran/code/dotfiles)
line 29: sourcing "/Users/tran/.config/nvim/autoload/plug.vim"
finished sourcing /Users/tran/.config/nvim/autoload/plug.vim
continuing in /Users/tran/.config/nvim/init.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim)
chdir(/Users/tran/code/dotfiles)
line 80: sourcing "/Users/tran/.config/nvim/local_bundles.vim"
finished sourcing /Users/tran/.config/nvim/local_bundles.vim
continuing in /Users/tran/.config/nvim/init.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot)
chdir(/Users/tran/code/dotfiles)
line 83: sourcing "/Users/tran/.config/nvim/plugged/vim-polyglot/filetype.vim"
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot/autoload/polyglot)
chdir(/Users/tran/code/dotfiles)
line 1: sourcing "/Users/tran/.config/nvim/plugged/vim-polyglot/autoload/polyglot/init.vim"
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot)
chdir(/Users/tran/code/dotfiles)
line 147: sourcing "/Users/tran/.config/nvim/plugged/vim-polyglot/filetype.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-polyglot/filetype.vim
continuing in /Users/tran/.config/nvim/plugged/vim-polyglot/autoload/polyglot/init.vim
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime)
chdir(/Users/tran/code/dotfiles)
line 147: sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/filetype.vim"
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot/ftdetect)
chdir(/Users/tran/code/dotfiles)
line 2229: sourcing "/Users/tran/.config/nvim/plugged/vim-polyglot/ftdetect/polyglot.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-polyglot/ftdetect/polyglot.vim
continuing in /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/filetype.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/requirements.txt.vim/ftdetect)
chdir(/Users/tran/code/dotfiles)
line 2229: sourcing "/Users/tran/.config/nvim/plugged/requirements.txt.vim/ftdetect/requirements.vim"
finished sourcing /Users/tran/.config/nvim/plugged/requirements.txt.vim/ftdetect/requirements.vim
continuing in /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/filetype.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-markdown/ftdetect)
chdir(/Users/tran/code/dotfiles)
line 2229: sourcing "/Users/tran/.config/nvim/plugged/vim-markdown/ftdetect/markdown.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-markdown/ftdetect/markdown.vim
continuing in /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/filetype.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/ultisnips/ftdetect)
chdir(/Users/tran/code/dotfiles)
line 2229: sourcing "/Users/tran/.config/nvim/plugged/ultisnips/ftdetect/snippets.vim"
finished sourcing /Users/tran/.config/nvim/plugged/ultisnips/ftdetect/snippets.vim
continuing in /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/filetype.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-fugitive/ftdetect)
chdir(/Users/tran/code/dotfiles)
line 2229: sourcing "/Users/tran/.config/nvim/plugged/vim-fugitive/ftdetect/fugitive.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-fugitive/ftdetect/fugitive.vim
continuing in /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/filetype.vim
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/filetype.vim
continuing in /Users/tran/.config/nvim/plugged/vim-polyglot/autoload/polyglot/init.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot/ftdetect)
chdir(/Users/tran/code/dotfiles)
line 148: sourcing "/Users/tran/.config/nvim/plugged/vim-polyglot/ftdetect/polyglot.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-polyglot/ftdetect/polyglot.vim
continuing in /Users/tran/.config/nvim/plugged/vim-polyglot/autoload/polyglot/init.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/requirements.txt.vim/ftdetect)
chdir(/Users/tran/code/dotfiles)
line 148: sourcing "/Users/tran/.config/nvim/plugged/requirements.txt.vim/ftdetect/requirements.vim"
finished sourcing /Users/tran/.config/nvim/plugged/requirements.txt.vim/ftdetect/requirements.vim
continuing in /Users/tran/.config/nvim/plugged/vim-polyglot/autoload/polyglot/init.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-markdown/ftdetect)
chdir(/Users/tran/code/dotfiles)
line 148: sourcing "/Users/tran/.config/nvim/plugged/vim-markdown/ftdetect/markdown.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-markdown/ftdetect/markdown.vim
continuing in /Users/tran/.config/nvim/plugged/vim-polyglot/autoload/polyglot/init.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/ultisnips/ftdetect)
chdir(/Users/tran/code/dotfiles)
line 148: sourcing "/Users/tran/.config/nvim/plugged/ultisnips/ftdetect/snippets.vim"
finished sourcing /Users/tran/.config/nvim/plugged/ultisnips/ftdetect/snippets.vim
continuing in /Users/tran/.config/nvim/plugged/vim-polyglot/autoload/polyglot/init.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-fugitive/ftdetect)
chdir(/Users/tran/code/dotfiles)
line 148: sourcing "/Users/tran/.config/nvim/plugged/vim-fugitive/ftdetect/fugitive.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-fugitive/ftdetect/fugitive.vim
continuing in /Users/tran/.config/nvim/plugged/vim-polyglot/autoload/polyglot/init.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot/extras)
chdir(/Users/tran/code/dotfiles)
line 3584: sourcing "/Users/tran/.config/nvim/plugged/vim-polyglot/extras/filetype.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-polyglot/extras/filetype.vim
continuing in /Users/tran/.config/nvim/plugged/vim-polyglot/autoload/polyglot/init.vim
finished sourcing /Users/tran/.config/nvim/plugged/vim-polyglot/autoload/polyglot/init.vim
continuing in /Users/tran/.config/nvim/plugged/vim-polyglot/filetype.vim
finished sourcing /Users/tran/.config/nvim/plugged/vim-polyglot/filetype.vim
continuing in function plug#end
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime)
chdir(/Users/tran/code/dotfiles)
line 83: sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/filetype.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/filetype.vim
continuing in function plug#end
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime)
chdir(/Users/tran/code/dotfiles)
line 83: sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/ftplugin.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/ftplugin.vim
continuing in function plug#end
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime)
chdir(/Users/tran/code/dotfiles)
line 83: sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/indent.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/indent.vim
continuing in function plug#end
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax)
chdir(/Users/tran/code/dotfiles)
line 86: sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/syntax.vim"
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax)
chdir(/Users/tran/code/dotfiles)
line 19: sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/synload.vim"
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax)
chdir(/Users/tran/code/dotfiles)
line 21: sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/syncolor.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/syncolor.vim
continuing in /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/synload.vim
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/synload.vim
continuing in /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/syntax.vim
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/syntax.vim
continuing in function plug#end
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot)
chdir(/Users/tran/code/dotfiles)
line 86: sourcing "/Users/tran/.config/nvim/plugged/vim-polyglot/filetype.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-polyglot/filetype.vim
continuing in /Users/tran/.config/nvim/init.vim
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime)
chdir(/Users/tran/code/dotfiles)
line 86: sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/filetype.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/filetype.vim
continuing in /Users/tran/.config/nvim/init.vim
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime)
chdir(/Users/tran/code/dotfiles)
line 86: sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/ftplugin.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/ftplugin.vim
continuing in /Users/tran/.config/nvim/init.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot)
chdir(/Users/tran/code/dotfiles)
line 87: sourcing "/Users/tran/.config/nvim/plugged/vim-polyglot/filetype.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-polyglot/filetype.vim
continuing in /Users/tran/.config/nvim/init.vim
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime)
chdir(/Users/tran/code/dotfiles)
line 87: sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/filetype.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/filetype.vim
continuing in /Users/tran/.config/nvim/init.vim
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime)
chdir(/Users/tran/code/dotfiles)
line 87: sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/indent.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/indent.vim
continuing in /Users/tran/.config/nvim/init.vim
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax)
chdir(/Users/tran/code/dotfiles)
line 137: sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/syntax.vim"
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax)
chdir(/Users/tran/code/dotfiles)
line 15: sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/nosyntax.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/nosyntax.vim
continuing in /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/syntax.vim
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax)
chdir(/Users/tran/code/dotfiles)
line 19: sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/synload.vim"
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax)
chdir(/Users/tran/code/dotfiles)
line 21: sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/syncolor.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/syncolor.vim
continuing in /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/synload.vim
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/synload.vim
continuing in /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/syntax.vim
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/syntax.vim
continuing in /Users/tran/.config/nvim/init.vim
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/autoload/provider)
chdir(/Users/tran/code/dotfiles)
line 325: sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/autoload/provider/clipboard.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/autoload/provider/clipboard.vim
continuing in /Users/tran/.config/nvim/init.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim)
chdir(/Users/tran/code/dotfiles)
line 413: sourcing "/Users/tran/.config/nvim/local_init.vim"
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax)
chdir(/Users/tran/code/dotfiles)
line 64: sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/syncolor.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/syncolor.vim
continuing in /Users/tran/.config/nvim/local_init.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/dalton-vim/colors)
chdir(/Users/tran/code/dotfiles)
line 65: sourcing "/Users/tran/.config/nvim/plugged/dalton-vim/colors/dalton.vim"
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax)
chdir(/Users/tran/code/dotfiles)
line 7: sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/syncolor.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/syncolor.vim
continuing in /Users/tran/.config/nvim/plugged/dalton-vim/colors/dalton.vim
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax)
chdir(/Users/tran/code/dotfiles)
line 8: sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/syncolor.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/syncolor.vim
continuing in /Users/tran/.config/nvim/plugged/dalton-vim/colors/dalton.vim
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax)
chdir(/Users/tran/code/dotfiles)
line 10: sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/syncolor.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/syncolor.vim
continuing in /Users/tran/.config/nvim/plugged/dalton-vim/colors/dalton.vim
finished sourcing /Users/tran/.config/nvim/plugged/dalton-vim/colors/dalton.vim
continuing in /Users/tran/.config/nvim/local_init.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugins)
chdir(/Users/tran/code/dotfiles)
line 209: sourcing "/Users/tran/.config/nvim/plugins/whichkey.vim"
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-which-key/autoload)
chdir(/Users/tran/code/dotfiles)
line 15: sourcing "/Users/tran/.config/nvim/plugged/vim-which-key/autoload/which_key.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-which-key/autoload/which_key.vim
continuing in /Users/tran/code/dotfiles/nvim/plugins/whichkey.vim
finished sourcing /Users/tran/.config/nvim/plugins/whichkey.vim
continuing in /Users/tran/.config/nvim/local_init.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugins)
chdir(/Users/tran/code/dotfiles)
line 210: sourcing "/Users/tran/.config/nvim/plugins/editor.vim"
finished sourcing /Users/tran/.config/nvim/plugins/editor.vim
continuing in /Users/tran/.config/nvim/local_init.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugins)
chdir(/Users/tran/code/dotfiles)
line 211: sourcing "/Users/tran/.config/nvim/plugins/explorer.vim"
finished sourcing /Users/tran/.config/nvim/plugins/explorer.vim
continuing in /Users/tran/.config/nvim/local_init.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugins)
chdir(/Users/tran/code/dotfiles)
line 212: sourcing "/Users/tran/.config/nvim/plugins/search.vim"
finished sourcing /Users/tran/.config/nvim/plugins/search.vim
continuing in /Users/tran/.config/nvim/local_init.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugins)
chdir(/Users/tran/code/dotfiles)
line 213: sourcing "/Users/tran/.config/nvim/plugins/coc.vim"
finished sourcing /Users/tran/.config/nvim/plugins/coc.vim
continuing in /Users/tran/.config/nvim/local_init.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugins)
chdir(/Users/tran/code/dotfiles)
line 214: sourcing "/Users/tran/.config/nvim/plugins/git.vim"
finished sourcing /Users/tran/.config/nvim/plugins/git.vim
continuing in /Users/tran/.config/nvim/local_init.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugins)
chdir(/Users/tran/code/dotfiles)
line 215: sourcing "/Users/tran/.config/nvim/plugins/gutentags.vim"
finished sourcing /Users/tran/.config/nvim/plugins/gutentags.vim
continuing in /Users/tran/.config/nvim/local_init.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugins)
chdir(/Users/tran/code/dotfiles)
line 216: sourcing "/Users/tran/.config/nvim/plugins/snips.vim"
finished sourcing /Users/tran/.config/nvim/plugins/snips.vim
continuing in /Users/tran/.config/nvim/local_init.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugins)
chdir(/Users/tran/code/dotfiles)
line 217: sourcing "/Users/tran/.config/nvim/plugins/md.vim"
finished sourcing /Users/tran/.config/nvim/plugins/md.vim
continuing in /Users/tran/.config/nvim/local_init.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugins)
chdir(/Users/tran/code/dotfiles)
line 218: sourcing "/Users/tran/.config/nvim/plugins/jump.vim"
finished sourcing /Users/tran/.config/nvim/plugins/jump.vim
continuing in /Users/tran/.config/nvim/local_init.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugins)
chdir(/Users/tran/code/dotfiles)
line 219: sourcing "/Users/tran/.config/nvim/plugins/wiki.vim"
finished sourcing /Users/tran/.config/nvim/plugins/wiki.vim
continuing in /Users/tran/.config/nvim/local_init.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugins)
chdir(/Users/tran/code/dotfiles)
line 221: sourcing "/Users/tran/.config/nvim/plugins/statusline.vim"
finished sourcing /Users/tran/.config/nvim/plugins/statusline.vim
continuing in /Users/tran/.config/nvim/local_init.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugins)
chdir(/Users/tran/code/dotfiles)
line 222: sourcing "/Users/tran/.config/nvim/plugins/floaterm.vim"
finished sourcing /Users/tran/.config/nvim/plugins/floaterm.vim
continuing in /Users/tran/.config/nvim/local_init.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugins)
chdir(/Users/tran/code/dotfiles)
line 223: sourcing "/Users/tran/.config/nvim/plugins/keys.vim"
finished sourcing /Users/tran/.config/nvim/plugins/keys.vim
continuing in /Users/tran/.config/nvim/local_init.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugins)
chdir(/Users/tran/code/dotfiles)
line 227: sourcing "/Users/tran/.config/nvim/plugins/linter.vim"
finished sourcing /Users/tran/.config/nvim/plugins/linter.vim
continuing in /Users/tran/.config/nvim/local_init.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugins)
chdir(/Users/tran/code/dotfiles)
line 230: sourcing "/Users/tran/.config/nvim/plugins/debug.vim"
finished sourcing /Users/tran/.config/nvim/plugins/debug.vim
continuing in /Users/tran/.config/nvim/local_init.vim
finished sourcing /Users/tran/.config/nvim/local_init.vim
continuing in /Users/tran/.config/nvim/init.vim
finished sourcing /Users/tran/.config/nvim/init.vim
not found in 'packpath': "pack/*/start/*"
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugin/bufkill.vim"
finished sourcing /Users/tran/.config/nvim/plugin/bufkill.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugin/difftools.vim"
finished sourcing /Users/tran/.config/nvim/plugin/difftools.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugin/nicefold.vim"
finished sourcing /Users/tran/.config/nvim/plugin/nicefold.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-commentary/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/vim-commentary/plugin/commentary.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-commentary/plugin/commentary.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/grep.vim/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/grep.vim/plugin/grep.vim"
finished sourcing /Users/tran/.config/nvim/plugged/grep.vim/plugin/grep.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/delimitMate/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/delimitMate/plugin/delimitMate.vim"
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/delimitMate/autoload)
chdir(/Users/tran/code/dotfiles)
line 1: sourcing "/Users/tran/.config/nvim/plugged/delimitMate/autoload/delimitMate.vim"
finished sourcing /Users/tran/.config/nvim/plugged/delimitMate/autoload/delimitMate.vim
continuing in function <SNR>44_setup[30]..<SNR>44_init[3]..<SNR>44_option_init[10]..<SNR>44_set
finished sourcing /Users/tran/.config/nvim/plugged/delimitMate/plugin/delimitMate.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-bootstrap-updater/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/vim-bootstrap-updater/plugin/vim_bootstrap_updater.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-bootstrap-updater/plugin/vim_bootstrap_updater.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vimproc.vim/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/vimproc.vim/plugin/vimproc.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vimproc.vim/plugin/vimproc.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-misc/plugin/xolox)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/vim-misc/plugin/xolox/misc.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-misc/plugin/xolox/misc.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-session/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/vim-session/plugin/session.vim"
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-misc/autoload/xolox)
chdir(/Users/tran/code/dotfiles)
line 21: sourcing "/Users/tran/.config/nvim/plugged/vim-misc/autoload/xolox/misc.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-misc/autoload/xolox/misc.vim
continuing in /Users/tran/.config/nvim/plugged/vim-session/plugin/session.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-misc/autoload/xolox/misc)
chdir(/Users/tran/code/dotfiles)
line 162: sourcing "/Users/tran/.config/nvim/plugged/vim-misc/autoload/xolox/misc/cursorhold.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-misc/autoload/xolox/misc/cursorhold.vim
continuing in /Users/tran/.config/nvim/plugged/vim-session/plugin/session.vim
finished sourcing /Users/tran/.config/nvim/plugged/vim-session/plugin/session.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/requirements.txt.vim/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/requirements.txt.vim/plugin/requirements.vim"
finished sourcing /Users/tran/.config/nvim/plugged/requirements.txt.vim/plugin/requirements.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.fzf/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.fzf/plugin/fzf.vim"
finished sourcing /Users/tran/.fzf/plugin/fzf.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/fzf.vim/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/fzf.vim/plugin/fzf.vim"
finished sourcing /Users/tran/.config/nvim/plugged/fzf.vim/plugin/fzf.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-gutentags/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/vim-gutentags/plugin/gutentags.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-gutentags/plugin/gutentags.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/Colorizer/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/Colorizer/plugin/ColorizerPlugin.vim"
finished sourcing /Users/tran/.config/nvim/plugged/Colorizer/plugin/ColorizerPlugin.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/lightline.vim/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/lightline.vim/plugin/lightline.vim"
finished sourcing /Users/tran/.config/nvim/plugged/lightline.vim/plugin/lightline.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-surround/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/vim-surround/plugin/surround.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-surround/plugin/surround.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/quickr-preview.vim/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/quickr-preview.vim/plugin/quickr-preview.vim"
finished sourcing /Users/tran/.config/nvim/plugged/quickr-preview.vim/plugin/quickr-preview.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/ale/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/ale/plugin/ale.vim"
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/ale/autoload/ale)
chdir(/Users/tran/code/dotfiles)
line 317: sourcing "/Users/tran/.config/nvim/plugged/ale/autoload/ale/events.vim"
finished sourcing /Users/tran/.config/nvim/plugged/ale/autoload/ale/events.vim
continuing in /Users/tran/.config/nvim/plugged/ale/plugin/ale.vim
finished sourcing /Users/tran/.config/nvim/plugged/ale/plugin/ale.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/coc.nvim/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/coc.nvim/plugin/coc.vim"
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/coc.nvim/autoload/coc)
chdir(/Users/tran/code/dotfiles)
line 49: sourcing "/Users/tran/.config/nvim/plugged/coc.nvim/autoload/coc/rpc.vim"
finished sourcing /Users/tran/.config/nvim/plugged/coc.nvim/autoload/coc/rpc.vim
continuing in /Users/tran/.config/nvim/plugged/coc.nvim/plugin/coc.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/coc.nvim/autoload/coc)
chdir(/Users/tran/code/dotfiles)
line 10: sourcing "/Users/tran/.config/nvim/plugged/coc.nvim/autoload/coc/util.vim"
finished sourcing /Users/tran/.config/nvim/plugged/coc.nvim/autoload/coc/util.vim
continuing in function coc#rpc#start_server
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/coc.nvim/autoload/coc)
chdir(/Users/tran/code/dotfiles)
line 14: sourcing "/Users/tran/.config/nvim/plugged/coc.nvim/autoload/coc/client.vim"
finished sourcing /Users/tran/.config/nvim/plugged/coc.nvim/autoload/coc/client.vim
continuing in function coc#rpc#start_server
finished sourcing /Users/tran/.config/nvim/plugged/coc.nvim/plugin/coc.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/tagbar/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/tagbar/plugin/tagbar.vim"
finished sourcing /Users/tran/.config/nvim/plugged/tagbar/plugin/tagbar.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-which-key/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/vim-which-key/plugin/which_key.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-which-key/plugin/which_key.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/any-jump.vim/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/any-jump.vim/plugin/any-jump.vim"
finished sourcing /Users/tran/.config/nvim/plugged/any-jump.vim/plugin/any-jump.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-indentwise/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/vim-indentwise/plugin/indentwise.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-indentwise/plugin/indentwise.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-better-whitespace/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/vim-better-whitespace/plugin/better-whitespace.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-better-whitespace/plugin/better-whitespace.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/ctrlsf.vim/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/ctrlsf.vim/plugin/ctrlsf.vim"
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/ctrlsf.vim/autoload/ctrlsf)
chdir(/Users/tran/code/dotfiles)
line 93: sourcing "/Users/tran/.config/nvim/plugged/ctrlsf.vim/autoload/ctrlsf/backend.vim"
finished sourcing /Users/tran/.config/nvim/plugged/ctrlsf.vim/autoload/ctrlsf/backend.vim
continuing in /Users/tran/.config/nvim/plugged/ctrlsf.vim/plugin/ctrlsf.vim
finished sourcing /Users/tran/.config/nvim/plugged/ctrlsf.vim/plugin/ctrlsf.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/nvim-web-devicons/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/nvim-web-devicons/plugin/nvim-web-devicons.vim"
finished sourcing /Users/tran/.config/nvim/plugged/nvim-web-devicons/plugin/nvim-web-devicons.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-devicons/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/vim-devicons/plugin/webdevicons.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-devicons/plugin/webdevicons.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/tabular/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/tabular/plugin/Tabular.vim"
finished sourcing /Users/tran/.config/nvim/plugged/tabular/plugin/Tabular.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/wiki.vim/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/wiki.vim/plugin/wiki.vim"
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki)
chdir(/Users/tran/code/dotfiles)
line 11: sourcing "/Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/init.vim"
finished sourcing /Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/init.vim
continuing in /Users/tran/.config/nvim/plugged/wiki.vim/plugin/wiki.vim
Executing command: "'/usr/local/bin/zsh' '-c' 'uname'"


finished sourcing /Users/tran/.config/nvim/plugged/wiki.vim/plugin/wiki.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-roam/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/vim-roam/plugin/roam.vim"
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-roam/autoload/roam)
chdir(/Users/tran/code/dotfiles)
line 8: sourcing "/Users/tran/.config/nvim/plugged/vim-roam/autoload/roam/init.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-roam/autoload/roam/init.vim
continuing in /Users/tran/.config/nvim/plugged/vim-roam/plugin/roam.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki)
chdir(/Users/tran/code/dotfiles)
line 5: sourcing "/Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/u.vim"
finished sourcing /Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/u.vim
continuing in function roam#init#option
finished sourcing /Users/tran/.config/nvim/plugged/vim-roam/plugin/roam.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-roam/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/vim-roam/plugin/util.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-roam/plugin/util.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/lf.vim/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/lf.vim/plugin/lf.vim"
finished sourcing /Users/tran/.config/nvim/plugged/lf.vim/plugin/lf.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-floaterm/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/vim-floaterm/plugin/floaterm.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-floaterm/plugin/floaterm.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/editorconfig-vim/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/editorconfig-vim/plugin/editorconfig.vim"
finished sourcing /Users/tran/.config/nvim/plugged/editorconfig-vim/plugin/editorconfig.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/ultisnips/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/ultisnips/plugin/UltiSnips.vim"
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/ultisnips/autoload/UltiSnips)
chdir(/Users/tran/code/dotfiles)
line 28: sourcing "/Users/tran/.config/nvim/plugged/ultisnips/autoload/UltiSnips/map_keys.vim"
finished sourcing /Users/tran/.config/nvim/plugged/ultisnips/autoload/UltiSnips/map_keys.vim
continuing in /Users/tran/.config/nvim/plugged/ultisnips/plugin/UltiSnips.vim
finished sourcing /Users/tran/.config/nvim/plugged/ultisnips/plugin/UltiSnips.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-snippets/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/vim-snippets/plugin/vimsnippets.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-snippets/plugin/vimsnippets.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-easymotion/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-tmux-navigator/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/vim-tmux-navigator/plugin/tmux_navigator.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-tmux-navigator/plugin/tmux_navigator.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/gv.vim/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/gv.vim/plugin/gv.vim"
finished sourcing /Users/tran/.config/nvim/plugged/gv.vim/plugin/gv.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-fugitive/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/vim-fugitive/plugin/fugitive.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-fugitive/plugin/fugitive.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/fugitive-gitlab.vim/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/fugitive-gitlab.vim/plugin/gitlab.vim"
finished sourcing /Users/tran/.config/nvim/plugged/fugitive-gitlab.vim/plugin/gitlab.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-rhubarb/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/vim-rhubarb/plugin/rhubarb.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-rhubarb/plugin/rhubarb.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-gitgutter/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/vim-gitgutter/plugin/gitgutter.vim"
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-gitgutter/autoload/gitgutter)
chdir(/Users/tran/code/dotfiles)
line 51: sourcing "/Users/tran/.config/nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-gitgutter/autoload/gitgutter/utility.vim
continuing in /Users/tran/.config/nvim/plugged/vim-gitgutter/plugin/gitgutter.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-gitgutter/autoload/gitgutter)
chdir(/Users/tran/code/dotfiles)
line 94: sourcing "/Users/tran/.config/nvim/plugged/vim-gitgutter/autoload/gitgutter/highlight.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-gitgutter/autoload/gitgutter/highlight.vim
continuing in /Users/tran/.config/nvim/plugged/vim-gitgutter/plugin/gitgutter.vim
finished sourcing /Users/tran/.config/nvim/plugged/vim-gitgutter/plugin/gitgutter.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/vim-polyglot/plugin/polyglot.vim"
--- Autocommands ---
PluginXoloxMisc  CursorHold
    *         call xolox#misc#cursorhold#autocmd()
	Last set from ~/.config/nvim/plugged/vim-misc/plugin/xolox/misc.vim line 13
ALEEvents  CursorHold
    *         if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif
	Last set from ~/.config/nvim/plugged/ale/autoload/ale/events.vim line 135
              if exists('*ale#lsp#Send') | call ale#hover#ShowTruncatedMessageAtCursor() | endif
	Last set from ~/.config/nvim/plugged/ale/autoload/ale/events.vim line 151
coc_nvim  CursorHold
    *         call coc#float#check_related()
	Last set from ~/.config/nvim/plugged/coc.nvim/plugin/coc.vim line 288
              call s:Autocmd('CursorHold', +expand('<abuf>'))
	Last set from ~/.config/nvim/plugged/coc.nvim/plugin/coc.vim line 309
webdevicons_cursor_hold  CursorHold
    *         silent! call s:CursorHoldUpdate()
	Last set from ~/.config/nvim/plugged/vim-devicons/plugin/webdevicons.vim line 392
gitgutter  CursorHold
    *         call gitgutter#process_buffer(bufnr(''), 0)
	Last set from ~/.config/nvim/plugged/vim-gitgutter/plugin/gitgutter.vim line 264
finished sourcing /Users/tran/.config/nvim/plugged/vim-polyglot/plugin/polyglot.vim
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/plugin/gzip.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/plugin/gzip.vim
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/plugin/health.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/plugin/health.vim
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/plugin/man.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/plugin/man.vim
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/plugin/matchit.vim"
not found in 'packpath': "pack/*/start/matchit"
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-commentary)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/grep.vim)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/delimitMate)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/indentLine)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-bootstrap-updater)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vimproc.vim)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-misc)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-session)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/requirements.txt.vim)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.fzf)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/fzf.vim)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-gutentags)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/Colorizer)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/lightline.vim)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/dalton-vim)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/oceanic-next)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-surround)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/quickr-preview.vim)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/ale)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/coc.nvim)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/tagbar)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-which-key)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/any-jump.vim)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-indentwise)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-better-whitespace)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/ctrlsf.vim)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/nvim-web-devicons)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-devicons)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/tabular)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-markdown)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/wiki.vim)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-roam)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/lf.vim)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-floaterm)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/editorconfig-vim)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/ultisnips)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-snippets)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-odoo-snippets)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-easymotion)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-tmux-navigator)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/gv.vim)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-fugitive)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/fugitive-gitlab.vim)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-rhubarb)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-gitgutter)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/private/etc/xdg/nvim)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.local/share/nvim/site)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/site)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/usr/share/nvim/site)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/pack/dist/opt)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/pack/dist/opt/matchit/plugin)
chdir(/Users/tran/code/dotfiles)
line 3: sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/pack/dist/opt/matchit/plugin/matchit.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/pack/dist/opt/matchit/plugin/matchit.vim
continuing in /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/plugin/matchit.vim
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/plugin/matchit.vim
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/plugin/matchparen.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/plugin/matchparen.vim
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/plugin/netrwPlugin.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/plugin/netrwPlugin.vim
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/plugin/rplugin.vim"
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.local/share/nvim)
chdir(/Users/tran/code/dotfiles)
line 3: sourcing "/Users/tran/.local/share/nvim/rplugin.vim"
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/autoload/remote)
chdir(/Users/tran/code/dotfiles)
line 5: sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/autoload/remote/host.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/autoload/remote/host.vim
continuing in /Users/tran/.local/share/nvim/rplugin.vim
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/autoload/remote)
chdir(/Users/tran/code/dotfiles)
line 34: sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/autoload/remote/define.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/autoload/remote/define.vim
continuing in function remote#host#RegisterPlugin
finished sourcing /Users/tran/.local/share/nvim/rplugin.vim
continuing in function <SNR>105_LoadRemotePlugins
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/plugin/rplugin.vim
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/plugin/shada.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/plugin/shada.vim
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/plugin/spellfile.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/plugin/spellfile.vim
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/plugin/tarPlugin.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/plugin/tarPlugin.vim
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/plugin/tohtml.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/plugin/tohtml.vim
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/plugin/tutor.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/plugin/tutor.vim
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/plugin/zipPlugin.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/plugin/zipPlugin.vim
not found in 'packpath': "pack/*/start/*"
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/indentLine/after/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/indentLine/after/plugin/indentLine.vim"
finished sourcing /Users/tran/.config/nvim/plugged/indentLine/after/plugin/indentLine.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/ctrlsf.vim/after/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/ctrlsf.vim/after/plugin/ctrlsf.vim"
finished sourcing /Users/tran/.config/nvim/plugged/ctrlsf.vim/after/plugin/ctrlsf.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/tabular/after/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/tabular/after/plugin/TabularMaps.vim"
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/tabular/autoload)
chdir(/Users/tran/code/dotfiles)
line 5: sourcing "/Users/tran/.config/nvim/plugged/tabular/autoload/tabular.vim"
finished sourcing /Users/tran/.config/nvim/plugged/tabular/autoload/tabular.vim
continuing in function AddTabularPattern[7]..<SNR>75_ParsePattern
finished sourcing /Users/tran/.config/nvim/plugged/tabular/after/plugin/TabularMaps.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/ultisnips/after/plugin)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/ultisnips/after/plugin/UltiSnips_after.vim"
finished sourcing /Users/tran/.config/nvim/plugged/ultisnips/after/plugin/UltiSnips_after.vim
Reading ShaDa file "/Users/tran/.local/share/nvim/shada/main.shada" info marks oldfiles
Executing BufWinEnter Autocommands for "*"
autocommand if &ft == "" && expand("<afile>:e") == "" | call s:Observe('shebang#Detect') | endif

Executing BufWinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing BufWinEnter Autocommands for "*"
autocommand call s:Autocmd('BufWinEnter', +expand('<abuf>'), win_getid())

Executing BufWinEnter Autocommands for "*"
autocommand call <SID>SetupAutoCommands()

Executing BufWinEnter Autocommands for "*"
autocommand call s:IndentLinesDisable() | call s:LeadingSpaceDisable() | call s:Setup()

Executing BufEnter Autocommands for "*"
autocommand call s:detect_indent()

chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot/autoload/polyglot)
chdir(/Users/tran/code/dotfiles)
line 17: sourcing "/Users/tran/.config/nvim/plugged/vim-polyglot/autoload/polyglot/sleuth.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-polyglot/autoload/polyglot/sleuth.vim
continuing in function <SNR>5_detect_indent
Executing BufEnter Autocommands for "*"
autocommand :syntax sync fromstart

Executing BufEnter Autocommands for "*"
autocommand call <SID>UpdateList('BufEnter')

Executing BufEnter Autocommands for "*"
autocommand if !exists('b:delimitMate_was_here') |   call <SID>setup() |   let b:delimitMate_was_here = 1 | endif

Executing BufEnter Autocommands for "*"
autocommand call lightline#update()

chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/lightline.vim/autoload)
chdir(/Users/tran/code/dotfiles)
line 0: sourcing "/Users/tran/.config/nvim/plugged/lightline.vim/autoload/lightline.vim"
finished sourcing /Users/tran/.config/nvim/plugged/lightline.vim/autoload/lightline.vim
continuing in BufEnter Autocommands for "*"
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/coc.nvim/autoload)
chdir(/Users/tran/code/dotfiles)
line 34: sourcing "/Users/tran/.config/nvim/plugged/coc.nvim/autoload/coc.vim"
finished sourcing /Users/tran/.config/nvim/plugged/coc.nvim/autoload/coc.vim
continuing in function lightline#update[4]..lightline#init
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-fugitive/autoload)
chdir(/Users/tran/code/dotfiles)
line 5: sourcing "/Users/tran/.config/nvim/plugged/vim-fugitive/autoload/fugitive.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-fugitive/autoload/fugitive.vim
continuing in function lightline#update[4]..lightline#init[34]..FugitiveHead
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/lightline.vim/autoload/lightline)
chdir(/Users/tran/code/dotfiles)
line 37: sourcing "/Users/tran/.config/nvim/plugged/lightline.vim/autoload/lightline/tab.vim"
finished sourcing /Users/tran/.config/nvim/plugged/lightline.vim/autoload/lightline/tab.vim
continuing in function lightline#update[4]..lightline#init
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/lightline.vim/autoload/lightline/colorscheme)
chdir(/Users/tran/code/dotfiles)
line 2: sourcing "/Users/tran/.config/nvim/plugged/lightline.vim/autoload/lightline/colorscheme/one.vim"
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/lightline.vim/autoload/lightline)
chdir(/Users/tran/code/dotfiles)
line 18: sourcing "/Users/tran/.config/nvim/plugged/lightline.vim/autoload/lightline/colorscheme.vim"
finished sourcing /Users/tran/.config/nvim/plugged/lightline.vim/autoload/lightline/colorscheme.vim
continuing in /Users/tran/.config/nvim/plugged/lightline.vim/autoload/lightline/colorscheme/one.vim
finished sourcing /Users/tran/.config/nvim/plugged/lightline.vim/autoload/lightline/colorscheme/one.vim
continuing in function lightline#update[5]..lightline#colorscheme
Executing BufEnter Autocommands for "*"
autocommand if &previewwindow |     if !exists('b:quickr_preview_modifiable') |         let b:quickr_preview_modifiable = &modifiable |         let &modifiable = 0 |    endif | endif

Executing BufEnter Autocommands for "*"
autocommand call ale#events#ReadOrEnterEvent(str2nr(expand('<abuf>')))

chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/ale/autoload/ale)
chdir(/Users/tran/code/dotfiles)
line 4: sourcing "/Users/tran/.config/nvim/plugged/ale/autoload/ale/pattern_options.vim"
finished sourcing /Users/tran/.config/nvim/plugged/ale/autoload/ale/pattern_options.vim
continuing in function ale#events#ReadOrEnterEvent
Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand let s:buf_path = expand("%") | if isdirectory(s:buf_path) | bdelete! | call timer_start(100, {->OpenLfIn(s:buf_path, s:default_edit_cmd)}) | endif

Executing BufEnter Autocommands for "*"
autocommand if expand('%') ==# '' && &previewwindow && pumvisible() && getbufvar('#', '&omnifunc') ==# 'gitlab#omnifunc' |    setlocal nolist linebreak filetype=markdown | endif

Executing BufEnter Autocommands for "*"
autocommand if expand('%') ==# '' && &previewwindow && pumvisible() && getbufvar('#', '&omnifunc') ==# 'rhubarb#omnifunc' |    setlocal nolist linebreak filetype=markdown | endif

Executing BufEnter Autocommands for "*"
autocommand call s:on_bufenter()

chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-gitgutter/autoload)
chdir(/Users/tran/code/dotfiles)
line 1: sourcing "/Users/tran/.config/nvim/plugged/vim-gitgutter/autoload/gitgutter.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-gitgutter/autoload/gitgutter.vim
continuing in function <SNR>94_on_bufenter
Executing BufEnter Autocommands for "*"
autocommand sil call s:LocalBrowse(expand("<amatch>"))

Executing VimEnter Autocommands for "*"
autocommand call PolyglotVerify()

autocommand unmap! [[

Executing VimEnter Autocommands for "*"
autocommand call xolox#session#auto_load()

chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-session/autoload/xolox)
chdir(/Users/tran/code/dotfiles)
line 0: sourcing "/Users/tran/.config/nvim/plugged/vim-session/autoload/xolox/session.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-session/autoload/xolox/session.vim
continuing in VimEnter Autocommands for "*"
Executing VimEnter Autocommands for "*"
autocommand if expand('<amatch>')==''|call gutentags#setup_gutentags()|endif

chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-gutentags/autoload)
chdir(/Users/tran/code/dotfiles)
line 0: sourcing "/Users/tran/.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim
continuing in VimEnter Autocommands for "*"
Executing VimEnter Autocommands for "*"
autocommand call coc#rpc#notify('VimEnter', [])

Executing VimEnter Autocommands for "*"
autocommand silent! autocmd! FileExplorer

Executing VimEnter Autocommands for "*"
autocommand if winnr() != winnr('$') | call gitgutter#all(0) | endif

Executing VimEnter Autocommands for "*"
autocommand call s:VimEnter()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/coc.nvim/autoload/coc)
chdir(/Users/tran/code/dotfiles)
line 0: sourcing "/Users/tran/.config/nvim/plugged/coc.nvim/autoload/coc/float.vim"
finished sourcing /Users/tran/.config/nvim/plugged/coc.nvim/autoload/coc/float.vim
continuing in CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/tagbar/autoload)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/tagbar/autoload/tagbar.vim"
filetype detection:ON  plugin:ON  indent:ON
finished sourcing /Users/tran/.config/nvim/plugged/tagbar/autoload/tagbar.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/tagbar/autoload/tagbar)
chdir(/Users/tran/code/dotfiles)
line 1: sourcing "/Users/tran/.config/nvim/plugged/tagbar/autoload/tagbar/debug.vim"
finished sourcing /Users/tran/.config/nvim/plugged/tagbar/autoload/tagbar/debug.vim
continuing in function tagbar#currenttag[22]..<SNR>132_Init[4]..<SNR>132_CheckForExCtags
Executing command: "'/usr/local/bin/zsh' '-c' ''/usr/local/bin/ctags' --version'"


Executing command: "'/usr/local/bin/zsh' '-c' ''/usr/local/bin/ctags' --list-languages'"


chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/tagbar/autoload/tagbar/types)
chdir(/Users/tran/code/dotfiles)
line 6: sourcing "/Users/tran/.config/nvim/plugged/tagbar/autoload/tagbar/types/uctags.vim"
finished sourcing /Users/tran/.config/nvim/plugged/tagbar/autoload/tagbar/types/uctags.vim
continuing in function tagbar#currenttag[22]..<SNR>132_Init[10]..<SNR>132_InitTypes
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/tagbar/autoload/tagbar/prototypes)
chdir(/Users/tran/code/dotfiles)
line 4: sourcing "/Users/tran/.config/nvim/plugged/tagbar/autoload/tagbar/prototypes/typeinfo.vim"
finished sourcing /Users/tran/.config/nvim/plugged/tagbar/autoload/tagbar/prototypes/typeinfo.vim
continuing in function tagbar#currenttag[22]..<SNR>132_Init[10]..<SNR>132_InitTypes[6]..tagbar#types#uctags#init
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)

--- Terminal info --- {{{
&term: builtin_screen
Description: GNU Screen with 256 colors
Aliases: screen-256color
Boolean capabilities:
  auto_left_margin          bw         = false
  auto_right_margin         am         = true
  no_esc_ctlc               xsb        = false
  ceol_standout_glitch      xhp        = false
  eat_newline_glitch        xenl       = true
  erase_overstrike          eo         = false
  generic_type              gn         = false
  hard_copy                 hc         = false
  has_meta_key              km         = true
  has_status_line           hs         = false
  insert_null_glitch        in         = false
  memory_above              da         = false
  memory_below              db         = false
  move_insert_mode          mir        = true
  move_standout_mode        msgr       = true
  over_strike               os         = false
  status_line_esc_ok        eslok      = false
  dest_tabs_magic_smso      xt         = false
  tilde_glitch              hz         = false
  transparent_underline     ul         = false
  xon_xoff                  xon        = false
  needs_xon_xoff            nxon       = false
  prtr_silent               mc5i       = false
  hard_cursor               chts       = false
  non_rev_rmcup             nrrmc      = false
  no_pad_char               npc        = false
  non_dest_scroll_region    ndscr      = false
  can_change                ccc        = false
  back_color_erase          bce        = false
  hue_lightness_saturation  hls        = false
  col_addr_glitch           xhpa       = false
  cr_cancels_micro_mode     crxm       = false
  has_print_wheel           daisy      = false
  row_addr_glitch           xvpa       = false
  semi_auto_right_margin    sam        = false
  cpi_changes_res           cpix       = false
  lpi_changes_res           lpix       = false
  backspaces_with_bs        OTbs       = true
  crt_no_scrolling          OTns       = false
  no_correctly_working_cr   OTnc       = false
  gnu_has_meta_key          OTMT       = false
  linefeed_is_newline       OTNL       = false
  has_hardware_tabs         OTpt       = true
  return_does_clr_eol       OTxr       = false
Numeric capabilities:
  columns                   cols       = 80
  init_tabs                 it         = 8
  lines                     lines      = 24
  lines_of_memory           lm         = -1
  magic_cookie_glitch       xmc        = -1
  padding_baud_rate         pb         = -1
  virtual_terminal          vt         = -1
  width_status_line         wsl        = -1
  num_labels                nlab       = -1
  label_height              lh         = -1
  label_width               lw         = -1
  max_attributes            ma         = -1
  maximum_windows           wnum       = -1
  max_colors                colors     = 256
  max_pairs                 pairs      = 65536
  no_color_video            ncv        = -1
  buffer_capacity           bufsz      = -1
  dot_vert_spacing          spinv      = -1
  dot_horz_spacing          spinh      = -1
  max_micro_address         maddr      = -1
  max_micro_jump            mjump      = -1
  micro_col_size            mcs        = -1
  micro_line_size           mls        = -1
  number_of_pins            npins      = -1
  output_res_char           orc        = -1
  output_res_line           orl        = -1
  output_res_horz_inch      orhi       = -1
  output_res_vert_inch      orvi       = -1
  print_rate                cps        = -1
  wide_char_size            widcs      = -1
  buttons                   btns       = -1
  bit_image_entwining       bitwin     = -1
  bit_image_type            bitype     = -1
  magic_cookie_glitch_ul    OTug       = -1
  carriage_return_delay     OTdC       = -1
  new_line_delay            OTdN       = -1
  backspace_delay           OTdB       = -1
  horizontal_tab_delay      OTdT       = -1
  number_of_function_keys   OTkn       = -1
String capabilities:
  back_tab                  cbt        = <Esc>[Z
  bell                      bel        = <C-G>
  carriage_return           cr         = <CR>
  change_scroll_region      csr        = <Esc>[%i%p1%d;%p2%dr
  clear_all_tabs            tbc        = <Esc>[3g
  clear_screen              clear      = <Esc>[H<Esc>[J
  clr_eol                   el         = <Esc>[K
  clr_eos                   ed         = <Esc>[J
  column_address            hpa        = <Esc>[%i%p1%dG
  cursor_address            cup        = <Esc>[%i%p1%d;%p2%dH
  cursor_down               cud1       = <NL>
  cursor_home               home       = <Esc>[H
  cursor_invisible          civis      = <Esc>[?25l
  cursor_left               cub1       = <C-H>
  cursor_normal             cnorm      = <Esc>[34h<Esc>[?25h
  cursor_right              cuf1       = <Esc>[C
  cursor_up                 cuu1       = <Esc>M
  cursor_visible            cvvis      = <Esc>[34l
  delete_character          dch1       = <Esc>[P
  delete_line               dl1        = <Esc>[M
  enter_alt_charset_mode    smacs      = <C-N>
  enter_blink_mode          blink      = <Esc>[5m
  enter_bold_mode           bold       = <Esc>[1m
  enter_ca_mode             smcup      = <Esc>[?1049h
  enter_dim_mode            dim        = <Esc>[2m
  enter_insert_mode         smir       = <Esc>[4h
  enter_reverse_mode        rev        = <Esc>[7m
  enter_standout_mode       smso       = <Esc>[3m
  enter_underline_mode      smul       = <Esc>[4m
  exit_alt_charset_mode     rmacs      = <C-O>
  exit_attribute_mode       sgr0       = <Esc>[m<C-O>
  exit_ca_mode              rmcup      = <Esc>[?1049l
  exit_insert_mode          rmir       = <Esc>[4l
  exit_standout_mode        rmso       = <Esc>[23m
  exit_underline_mode       rmul       = <Esc>[24m
  flash_screen              flash      = <Esc>g
  from_status_line          fsl        = <Esc>\
  init_2string              is2        = <Esc>)0
  insert_line               il1        = <Esc>[L
  key_backspace             kbs        = <C-H>
  key_dc                    kdch1      = <Esc>[3~
  key_down                  kcud1      = <Esc>OB
  key_f1                    kf1        = <Esc>OP
  key_f10                   kf10       = <Esc>[21~
  key_f2                    kf2        = <Esc>OQ
  key_f3                    kf3        = <Esc>OR
  key_f4                    kf4        = <Esc>OS
  key_f5                    kf5        = <Esc>[15~
  key_f6                    kf6        = <Esc>[17~
  key_f7                    kf7        = <Esc>[18~
  key_f8                    kf8        = <Esc>[19~
  key_f9                    kf9        = <Esc>[20~
  key_home                  khome      = <Esc>[1~
  key_ic                    kich1      = <Esc>[2~
  key_left                  kcub1      = <Esc>OD
  key_npage                 knp        = <Esc>[6~
  key_ppage                 kpp        = <Esc>[5~
  key_right                 kcuf1      = <Esc>OC
  key_up                    kcuu1      = <Esc>OA
  keypad_local              rmkx       = <Esc>[?1l<Esc>>
  keypad_xmit               smkx       = <Esc>[?1h<Esc>=
  newline                   nel        = <Esc>E
  parm_dch                  dch        = <Esc>[%p1%dP
  parm_delete_line          dl         = <Esc>[%p1%dM
  parm_down_cursor          cud        = <Esc>[%p1%dB
  parm_ich                  ich        = <Esc>[%p1%d@
  parm_index                indn       = <Esc>[%p1%dS
  parm_insert_line          il         = <Esc>[%p1%dL
  parm_left_cursor          cub        = <Esc>[%p1%dD
  parm_right_cursor         cuf        = <Esc>[%p1%dC
  parm_up_cursor            cuu        = <Esc>[%p1%dA
  reset_2string             rs2        = <Esc>c<Esc>[?1000l<Esc>[?25h
  restore_cursor            rc         = <Esc>8
  row_address               vpa        = <Esc>[%i%p1%dd
  save_cursor               sc         = <Esc>7
  scroll_forward            ind        = <NL>
  scroll_reverse            ri         = <Esc>M
  set_attributes            sgr        = <Esc>[0%?%p6%t;1%;%?%p1%t;3%;%?%p2%t;4%;%?%p3%t;7%;%?%p4%t;5%;%?%p5%t;2%;m%?%p9%t<C-N>%e<C-O>%;
  set_tab                   hts        = <Esc>H
  tab                       ht         = <Tab>
  to_status_line            tsl        = <Esc>_
  acs_chars                 acsc       = ++,,--..00``aaffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz{{||}}~~
  key_btab                  kcbt       = <Esc>[Z
  ena_acs                   enacs      = <Esc>(B<Esc>)0
  key_end                   kend       = <Esc>[4~
  key_f11                   kf11       = <Esc>[23~
  key_f12                   kf12       = <Esc>[24~
  clr_bol                   el1        = <Esc>[1K
  orig_pair                 op         = <Esc>[39;49m
  key_mouse                 kmous      = <Esc>[M
  set_a_foreground          setaf      = <Esc>[%?%p1%{8}%<%t3%p1%d%e%p1%{16}%<%t9%p1%{8}%-%d%e38;5;%p1%d%;m
  set_a_background          setab      = <Esc>[%?%p1%{8}%<%t4%p1%d%e%p1%{16}%<%t10%p1%{8}%-%d%e48;5;%p1%d%;m
Extended boolean capabilities:
  AX                        = true
  G0                        = true
  XT                        = false
Extended numeric capabilities:
  U8                        = 1
Extended string capabilities:
  E0                        = <Esc>(B
  S0                        = <Esc>(%p1%c
  TS                        = 
  XM                        = 
  kDC3                      = 
  kDC4                      = 
  kDC5                      = 
  kDC6                      = 
  kDC7                      = 
  kDN                       = 
  kDN3                      = 
  kDN4                      = 
  kDN5                      = 
  kDN6                      = 
  kDN7                      = 
  kEND5                     = 
  kHOM5                     = 
  kLFT3                     = 
  kLFT4                     = 
  kLFT5                     = 
  kLFT6                     = 
  kLFT7                     = 
  kRIT3                     = 
  kRIT4                     = 
  kRIT5                     = 
  kRIT6                     = 
  kRIT7                     = 
  kUP                       = 
  ka2                       = 
  kb1                       = 
  kb3                       = 
  kc2                       = 
  xm                        = 
  ext.get_bg                = <Esc>]11;?<C-G>
  Ss                        = <Esc>[%p1%d q
  Se                        = <Esc>[ q
  setrgbf                   = <Esc>[38;2;%p1%d;%p2%d;%p3%dm
  setrgbb                   = <Esc>[48;2;%p1%d;%p2%d;%p3%dm
  ext.set_cursor_color      = <Esc>]12;#%p1%06x<C-G>
  ext.reset_cursor_color    = <Esc>]112<C-G>
  ext.save_title            = <Esc>[22;0;0t
  ext.restore_title         = <Esc>[23;0;0t
  ext.enable_lr_margin      = <Esc>[?69h
  ext.disable_lr_margin     = <Esc>[?69l
  ext.enable_bpaste         = <Esc>[?2004h
  ext.disable_bpaste        = <Esc>[?2004l
  ext.enable_focus          = <Esc>[?1004h
  ext.disable_focus         = <Esc>[?1004l
  ext.enable_mouse          = <Esc>[?1002h<Esc>[?1006h
  ext.disable_mouse         = <Esc>[?1002l<Esc>[?1006l
}}}

Executing FocusGained Autocommands for "*"
autocommand if mode() !~# '^c' | call s:Autocmd('FocusGained') | endif

Executing FocusGained Autocommands for "*"
autocommand if s:focus_was_lost | let s:focus_was_lost = 0 | call gitgutter#all(1) | endif

Executing FocusGained Autocommands for "*"
autocommand call fugitive#ReloadStatus(-2, 0)


NVIM v0.5.0-0af18a6
Build type: Release
LuaJIT 2.0.5
Compilation: /usr/bin/clang -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1 -DNDEBUG -Wall -Wextra -pedantic -Wno-unused-parameter -Wstrict-prototypes -std=gnu99 -Wshadow -Wconversion -Wmissing-prototypes -Wimplicit-fallthrough -Wvla -fstack-protector-strong -fno-common -fdiagnostics-color=auto -DINCLUDE_GENERATED_DECLARATIONS -D_GNU_SOURCE -DNVIM_MSGPACK_HAS_FLOAT32 -DNVIM_UNIBI_HAS_VAR_FROM -DMIN_LOG_LEVEL=3 -I/tmp/neovim-20201016-8310-u5cfj9/build/config -I/tmp/neovim-20201016-8310-u5cfj9/src -I/usr/local/include -I/tmp/neovim-20201016-8310-u5cfj9/deps-build/include -I/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/usr/include -I/usr/local/opt/gettext/include -I/tmp/neovim-20201016-8310-u5cfj9/build/src/nvim/auto -I/tmp/neovim-20201016-8310-u5cfj9/build/include
Compiled by tran@mbp18.local

Features: +acl +iconv +tui
See ":help feature-compile"

   system vimrc file: "$VIM/sysinit.vim"
  fall-back for $VIM: "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim"

Run :checkhealth for more info
chdir(/Users/tran/code/dotfiles)
chdir(/var/folders/jn/7jlp804x74j9y5zw57ch3v0m0000gn/T/nvimHTA9Wm/coc.nvim-7517)
chdir(/Users/tran/code/dotfiles)
sourcing "/var/folders/jn/7jlp804x74j9y5zw57ch3v0m0000gn/T/nvimHTA9Wm/coc.nvim-7517/coc-7517.vim"
finished sourcing /var/folders/jn/7jlp804x74j9y5zw57ch3v0m0000gn/T/nvimHTA9Wm/coc.nvim-7517/coc-7517.vim
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/wiki.vim/autoload/coc/source)
chdir(/Users/tran/code/dotfiles)
sourcing "/Users/tran/.config/nvim/plugged/wiki.vim/autoload/coc/source/wiki.vim"
finished sourcing /Users/tran/.config/nvim/plugged/wiki.vim/autoload/coc/source/wiki.vim
Executing CursorHold Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/autoload/provider)
chdir(/Users/tran/code/dotfiles)
sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/autoload/provider/python3.vim"
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/autoload/provider)
chdir(/Users/tran/code/dotfiles)
line 10: sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/autoload/provider/pythonx.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/autoload/provider/pythonx.vim
continuing in /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/autoload/provider/python3.vim
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/autoload/provider/python3.vim
chdir(/Users/tran/code/dotfiles)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/autoload)
chdir(/Users/tran/code/dotfiles)
line 14: sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/autoload/provider.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/autoload/provider.vim
continuing in function provider#python3#Call[9]..remote#host#Require[10]..provider#pythonx#Require
Executing CursorHold Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-misc/autoload/xolox/misc)
chdir(/Users/tran/code/dotfiles)
line 10: sourcing "/Users/tran/.config/nvim/plugged/vim-misc/autoload/xolox/misc/msg.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-misc/autoload/xolox/misc/msg.vim
continuing in function xolox#misc#cursorhold#autocmd
vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 0 ..
vim-misc 1.17.6: Running handler xolox#session#auto_save_periodic ..
Executing CursorHold Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

autocommand if exists('*ale#lsp#Send') | call ale#hover#ShowTruncatedMessageAtCursor() | endif

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'))

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

Executing CursorHold Autocommands for "*"
autocommand silent! checktime

Executing CursorHold Autocommands for "<buffer=1>"
autocommand if (&ft == "" || &ft == "conf") | call b:PolyglotObserve() | endif

chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot/autoload/polyglot)
chdir(/Users/tran/code/dotfiles)
line 0: sourcing "/Users/tran/.config/nvim/plugged/vim-polyglot/autoload/polyglot/shebang.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-polyglot/autoload/polyglot/shebang.vim
continuing in CursorHold Autocommands for "<buffer=1>"
Executing CursorHold Autocommands for "*"
autocommand call s:do_delayed_update()

chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/tagbar/autoload/tagbar)
chdir(/Users/tran/code/dotfiles)
line 1: sourcing "/Users/tran/.config/nvim/plugged/tagbar/autoload/tagbar/state.vim"
finished sourcing /Users/tran/.config/nvim/plugged/tagbar/autoload/tagbar/state.vim
continuing in function <SNR>132_do_delayed_update
autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)

chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-misc/autoload/xolox/misc)
chdir(/Users/tran/code/dotfiles)
line 8: sourcing "/Users/tran/.config/nvim/plugged/vim-misc/autoload/xolox/misc/timer.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-misc/autoload/xolox/misc/timer.vim
continuing in function xolox#session#open_cmd
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-misc/autoload/xolox/misc)
chdir(/Users/tran/code/dotfiles)
line 6: sourcing "/Users/tran/.config/nvim/plugged/vim-misc/autoload/xolox/misc/option.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-misc/autoload/xolox/misc/option.vim
continuing in function xolox#session#open_cmd[14]..<SNR>129_session_is_locked[1]..xolox#session#locking_enabled
Executing BufDelete Autocommands for "*"
autocommand silent! call remove(g:fzf#vim#buffers, expand('<abuf>'))

Executing BufDelete Autocommands for "*"
autocommand call lightline#update()

Executing BufDelete Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#engine#Cleanup(str2nr(expand('<abuf>'))) | endif

Executing BufDelete Autocommands for "*"
autocommand call s:RunBufDelete(expand('<abuf>'))

Executing BufDelete Autocommands for "*"
autocommand if getbufvar(+expand('<abuf>'), 'buftype') ==# 'terminal' |   if !empty(FugitiveGitDir(+expand('<abuf>'))) |     call fugitive#ReloadStatus(+expand('<abuf>'), 1) |   else |     call fugitive#ReloadStatus(-2, 0) |  endif | endif

Executing BufDelete Autocommands for "*"
autocommand call s:HandleBufDelete(expand('<afile>'), expand('<abuf>'))

Executing BufWipeout Autocommands for "*"
autocommand exe s:TempDelete(  expand('<amatch>:p'))

Executing BufWipeout Autocommands for "*"
autocommand call s:HandleBufDelete(expand('<afile>'), expand('<abuf>'))

auto-removing autocommand: CursorHold <buffer=1>
auto-removing autocommand: CursorHoldI <buffer=1>
Executing BufUnload Autocommands for "*"
autocommand call s:Autocmd('BufUnload', +expand('<abuf>'))

Executing BufAdd Autocommands for "*"
autocommand call <SID>UpdateList('BufAdd')

Executing BufEnter Autocommands for "*"
autocommand call s:detect_indent()

Executing BufEnter Autocommands for "*"
autocommand :syntax sync fromstart

Executing BufEnter Autocommands for "*"
autocommand call <SID>UpdateList('BufEnter')

Executing BufEnter Autocommands for "*"
autocommand if !exists('b:delimitMate_was_here') |   call <SID>setup() |   let b:delimitMate_was_here = 1 | endif

Executing BufEnter Autocommands for "*"
autocommand call lightline#update()

Executing BufEnter Autocommands for "*"
autocommand if &previewwindow |     if !exists('b:quickr_preview_modifiable') |         let b:quickr_preview_modifiable = &modifiable |         let &modifiable = 0 |    endif | endif

Executing BufEnter Autocommands for "*"
autocommand call ale#events#ReadOrEnterEvent(str2nr(expand('<abuf>')))

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand let s:buf_path = expand("%") | if isdirectory(s:buf_path) | bdelete! | call timer_start(100, {->OpenLfIn(s:buf_path, s:default_edit_cmd)}) | endif

Executing BufEnter Autocommands for "*"
autocommand if expand('%') ==# '' && &previewwindow && pumvisible() && getbufvar('#', '&omnifunc') ==# 'gitlab#omnifunc' |    setlocal nolist linebreak filetype=markdown | endif

Executing BufEnter Autocommands for "*"
autocommand if expand('%') ==# '' && &previewwindow && pumvisible() && getbufvar('#', '&omnifunc') ==# 'rhubarb#omnifunc' |    setlocal nolist linebreak filetype=markdown | endif

Executing BufEnter Autocommands for "*"
autocommand call s:on_bufenter()

Executing BufEnter Autocommands for "*"
autocommand if expand('<amatch>') !~ '__Tagbar__.*' |     let s:last_alt_bufnr = bufnr('#') | endif

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/code/dotfiles)
Executing BufWinEnter Autocommands for "*"
autocommand if &ft == "" && expand("<afile>:e") == "" | call s:Observe('shebang#Detect') | endif

Executing BufWinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing BufWinEnter Autocommands for "*"
autocommand call s:Autocmd('BufWinEnter', +expand('<abuf>'), win_getid())

Executing BufWinEnter Autocommands for "*"
autocommand call <SID>SetupAutoCommands()

Executing BufWinEnter Autocommands for "*"
autocommand call s:IndentLinesDisable() | call s:LeadingSpaceDisable() | call s:Setup()

Executing BufWinEnter Autocommands for "*"
autocommand if s:can_diffoff(+expand('<abuf>')) && s:diff_window_count() == 1 |   call s:diffoff() | endif

chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-misc/autoload/xolox/misc)
chdir(/Users/tran/code/dotfiles)
line 5: sourcing "/Users/tran/.config/nvim/plugged/vim-misc/autoload/xolox/misc/persist.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-misc/autoload/xolox/misc/persist.vim
continuing in function xolox#session#open_cmd[17]..<SNR>129_lock_session
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-misc/autoload/xolox/misc)
chdir(/Users/tran/code/dotfiles)
line 14: sourcing "/Users/tran/.config/nvim/plugged/vim-misc/autoload/xolox/misc/perm.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-misc/autoload/xolox/misc/perm.vim
continuing in function xolox#session#open_cmd[17]..<SNR>129_lock_session[5]..xolox#misc#persist#save
vim-misc 1.17.6: Writing new contents of /Users/tran/.config/nvim/session/book-tc.vim.lock to temporary file /Users/tran/.config/nvim/session/book-tc.vim.lock.tmp ..
vim-misc 1.17.6: Replacing /Users/tran/.config/nvim/session/book-tc.vim.lock with /Users/tran/.config/nvim/session/book-tc.vim.lock.tmp ..
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-misc/autoload/xolox/misc)
chdir(/Users/tran/code/dotfiles)
line 9: sourcing "/Users/tran/.config/nvim/plugged/vim-misc/autoload/xolox/misc/str.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-misc/autoload/xolox/misc/str.vim
continuing in function xolox#session#open_cmd[17]..<SNR>129_lock_session[5]..xolox#misc#persist#save[14]..xolox#misc#perm#update[20]..xolox#misc#timer#stop[13]..xolox#misc#timer#convert
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/plugged/vim-misc/autoload/xolox/misc)
chdir(/Users/tran/code/dotfiles)
line 13: sourcing "/Users/tran/.config/nvim/plugged/vim-misc/autoload/xolox/misc/format.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-misc/autoload/xolox/misc/format.vim
continuing in function xolox#session#open_cmd[17]..<SNR>129_lock_session[5]..xolox#misc#persist#save[14]..xolox#misc#perm#update[20]..xolox#misc#timer#stop[13]..xolox#misc#timer#convert
vim-misc 1.17.6: Successfully updated /Users/tran/.config/nvim/session/book-tc.vim.lock using atomic rename in 0.0069 seconds.
chdir(/Users/tran/code/dotfiles)
chdir(/Users/tran/.config/nvim/session)
chdir(/Users/tran/code/dotfiles)
line 18: sourcing "/Users/tran/.config/nvim/session/book-tc.vim"
Already only one window
chdir(/Users/tran/Documents/book-tc)
Executing DirChanged Autocommands for "*"
autocommand call s:Autocmd('DirChanged', get(v:event, 'cwd', ''))

Executing DirChanged Autocommands for "*"
autocommand call rpcnotify(4, "python_chdir", v:event.cwd)

/Users/tran/Documents/book-tc
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
Executing BufAdd Autocommands for "*"
autocommand call <SID>UpdateList('BufAdd')

chdir(/Users/tran/Documents/book-tc)
chdir(internal_tools)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc/internal_tools)
chdir(/Users/tran/Documents/book-tc)
Executing BufAdd Autocommands for "*"
autocommand call <SID>UpdateList('BufAdd')

chdir(/Users/tran/Documents/book-tc)
chdir(internal_tools)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc/internal_tools)
chdir(/Users/tran/Documents/book-tc)
Executing BufAdd Autocommands for "*"
autocommand call <SID>UpdateList('BufAdd')

chdir(/Users/tran/Documents/book-tc)
chdir(deployment)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc/deployment)
chdir(/Users/tran/Documents/book-tc)
Executing BufAdd Autocommands for "*"
autocommand call <SID>UpdateList('BufAdd')

chdir(/Users/tran/Documents/book-tc)
chdir(odoo_basics)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc/odoo_basics)
chdir(/Users/tran/Documents/book-tc)
Executing BufAdd Autocommands for "*"
autocommand call <SID>UpdateList('BufAdd')

chdir(/Users/tran/Documents/book-tc)
chdir(odoo_basics)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc/odoo_basics)
chdir(/Users/tran/Documents/book-tc)
Executing BufAdd Autocommands for "*"
autocommand call <SID>UpdateList('BufAdd')

chdir(/Users/tran/Documents/book-tc)
chdir(odoo_basics)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc/odoo_basics)
chdir(/Users/tran/Documents/book-tc)
Executing BufAdd Autocommands for "*"
autocommand call <SID>UpdateList('BufAdd')

chdir(/Users/tran/Documents/book-tc)
chdir(odoo_basics)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc/odoo_basics)
chdir(/Users/tran/Documents/book-tc)
Executing BufAdd Autocommands for "*"
autocommand call <SID>UpdateList('BufAdd')

chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents)
chdir(/Users/tran/Documents/book-tc)
Executing BufAdd Autocommands for "*"
autocommand call <SID>UpdateList('BufAdd')

chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
Executing BufAdd Autocommands for "*"
autocommand call <SID>UpdateList('BufAdd')

chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
Executing BufAdd Autocommands for "*"
autocommand call <SID>UpdateList('BufAdd')

chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
Executing BufAdd Autocommands for "*"
autocommand call <SID>UpdateList('BufAdd')

chdir(/Users/tran/Documents/book-tc)
chdir(tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(tc)
chdir(/Users/tran/Documents/book-tc)
Executing BufAdd Autocommands for "*"
autocommand call <SID>UpdateList('BufAdd')

chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
Executing BufAdd Autocommands for "*"
autocommand call <SID>UpdateList('BufAdd')

chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
Executing BufAdd Autocommands for "*"
autocommand call <SID>UpdateList('BufAdd')

chdir(/Users/tran/Documents/book-tc)
chdir(tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(tc)
chdir(/Users/tran/Documents/book-tc)
Executing BufAdd Autocommands for "*"
autocommand call <SID>UpdateList('BufAdd')

chdir(/Users/tran/Documents/book-tc)
chdir(tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(tc)
chdir(/Users/tran/Documents/book-tc)
Executing BufAdd Autocommands for "*"
autocommand call <SID>UpdateList('BufAdd')

chdir(/Users/tran/Documents/book-tc)
chdir(odoo_basics)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc/odoo_basics)
chdir(/Users/tran/Documents/book-tc)
Executing BufAdd Autocommands for "*"
autocommand call <SID>UpdateList('BufAdd')

chdir(/Users/tran/Documents/book-tc)
chdir(internal_tools)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc/internal_tools)
chdir(/Users/tran/Documents/book-tc)
Executing BufAdd Autocommands for "*"
autocommand call <SID>UpdateList('BufAdd')

chdir(/Users/tran/Documents/book-tc)
chdir(internal_tools)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc/internal_tools)
chdir(/Users/tran/Documents/book-tc)
Executing BufAdd Autocommands for "*"
autocommand call <SID>UpdateList('BufAdd')

chdir(/Users/tran/Documents/book-tc)
chdir(deployment)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc/deployment)
chdir(/Users/tran/Documents/book-tc)
Executing BufAdd Autocommands for "*"
autocommand call <SID>UpdateList('BufAdd')

chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran)
chdir(/Users/tran/Documents/book-tc)
Executing BufAdd Autocommands for "*"
autocommand call <SID>UpdateList('BufAdd')

chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran)
chdir(/Users/tran/Documents/book-tc)
Executing BufAdd Autocommands for "*"
autocommand call <SID>UpdateList('BufAdd')

chdir(/Users/tran/Documents/book-tc)
chdir(misc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc/misc)
chdir(/Users/tran/Documents/book-tc)
Executing BufAdd Autocommands for "*"
autocommand call <SID>UpdateList('BufAdd')

chdir(/Users/tran/Documents/book-tc)
chdir(misc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc/misc)
chdir(/Users/tran/Documents/book-tc)
Executing BufAdd Autocommands for "*"
autocommand call <SID>UpdateList('BufAdd')

chdir(/Users/tran/Documents/book-tc)
chdir(misc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc/misc)
chdir(/Users/tran/Documents/book-tc)
Executing BufAdd Autocommands for "*"
autocommand call <SID>UpdateList('BufAdd')

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc/notes)
chdir(/Users/tran/Documents/book-tc)
Executing BufAdd Autocommands for "*"
autocommand call <SID>UpdateList('BufAdd')

chdir(/Users/tran/Documents/book-tc)
chdir(misc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc/misc)
chdir(/Users/tran/Documents/book-tc)
Executing BufAdd Autocommands for "*"
autocommand call <SID>UpdateList('BufAdd')

chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
Executing BufAdd Autocommands for "*"
autocommand call <SID>UpdateList('BufAdd')

chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
Executing BufLeave Autocommands for "*"
autocommand call <SID>UpdateLastColumn('BufLeave')

Executing BufLeave Autocommands for "*"
autocommand if &previewwindow |     if exists('b:quickr_preview_modifiable') |         let &modifiable = b:quickr_preview_modifiable |         unlet b:quickr_preview_modifiable |     endif | endif

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufWinLeave Autocommands for "*"
autocommand if s:can_diffoff(+expand('<abuf>')) && s:diff_window_count() == 2 |   call s:diffoff_all(s:Dir(+expand('<abuf>'))) | endif

Executing BufWinLeave Autocommands for "*"
autocommand execute getwinvar(+bufwinnr(+expand('<abuf>')), 'fugitive_leave')

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing BufReadPre Autocommands for "*"
autocommand exe s:TempReadPre( expand('<amatch>:p'))

"index.md" 
"index.md" 30L, 489C
Reading ShaDa file "/Users/tran/.local/share/nvim/shada/main.shada" marks
Executing BufReadPost Autocommands for "*.{md,mdx,mdown,mkd,mkdn,markdown,mdwn}"
autocommand setfiletype markdown

Executing FileType Autocommands for "*"
autocommand call s:LoadFTPlugin()

chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-markdown/ftplugin)
chdir(/Users/tran/Documents/book-tc)
line 17: sourcing "/Users/tran/.config/nvim/plugged/vim-markdown/ftplugin/markdown.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-markdown/ftplugin/markdown.vim
continuing in function <SNR>13_LoadFTPlugin
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot/ftplugin)
chdir(/Users/tran/Documents/book-tc)
line 17: sourcing "/Users/tran/.config/nvim/plugged/vim-polyglot/ftplugin/markdown.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-polyglot/ftplugin/markdown.vim
continuing in function <SNR>13_LoadFTPlugin
chdir(/Users/tran/Documents/book-tc)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/ftplugin)
chdir(/Users/tran/Documents/book-tc)
line 17: sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/ftplugin/markdown.vim"
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot/ftplugin)
chdir(/Users/tran/Documents/book-tc)
line 10: sourcing "/Users/tran/.config/nvim/plugged/vim-polyglot/ftplugin/html.vim"
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot/autoload)
chdir(/Users/tran/Documents/book-tc)
line 29: sourcing "/Users/tran/.config/nvim/plugged/vim-polyglot/autoload/htmlcomplete.vim"
chdir(/Users/tran/Documents/book-tc)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/autoload)
chdir(/Users/tran/Documents/book-tc)
line 7: sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/autoload/htmlcomplete.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/autoload/htmlcomplete.vim
continuing in function polyglot#init#is_disabled
finished sourcing /Users/tran/.config/nvim/plugged/vim-polyglot/autoload/htmlcomplete.vim
continuing in /Users/tran/.config/nvim/plugged/vim-polyglot/ftplugin/html.vim
finished sourcing /Users/tran/.config/nvim/plugged/vim-polyglot/ftplugin/html.vim
continuing in /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/ftplugin/markdown.vim
chdir(/Users/tran/Documents/book-tc)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/ftplugin)
chdir(/Users/tran/Documents/book-tc)
line 10: sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/ftplugin/html.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/ftplugin/html.vim
continuing in /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/ftplugin/markdown.vim
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot/after/ftplugin)
chdir(/Users/tran/Documents/book-tc)
line 10: sourcing "/Users/tran/.config/nvim/plugged/vim-polyglot/after/ftplugin/html.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-polyglot/after/ftplugin/html.vim
continuing in /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/ftplugin/markdown.vim
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/ftplugin/markdown.vim
continuing in function <SNR>13_LoadFTPlugin
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-markdown/after/ftplugin)
chdir(/Users/tran/Documents/book-tc)
line 17: sourcing "/Users/tran/.config/nvim/plugged/vim-markdown/after/ftplugin/markdown.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-markdown/after/ftplugin/markdown.vim
continuing in function <SNR>13_LoadFTPlugin
Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-markdown/indent)
chdir(/Users/tran/Documents/book-tc)
line 14: sourcing "/Users/tran/.config/nvim/plugged/vim-markdown/indent/markdown.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-markdown/indent/markdown.vim
continuing in function <SNR>14_LoadIndent
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot/indent)
chdir(/Users/tran/Documents/book-tc)
line 14: sourcing "/Users/tran/.config/nvim/plugged/vim-polyglot/indent/markdown.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-polyglot/indent/markdown.vim
continuing in function <SNR>14_LoadIndent
Executing FileType Autocommands for "*"
autocommand exe "set syntax=" . expand("<amatch>")

Executing Syntax Autocommands for "*"
autocommand call s:SynSet()

chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-markdown/syntax)
chdir(/Users/tran/Documents/book-tc)
line 24: sourcing "/Users/tran/.config/nvim/plugged/vim-markdown/syntax/markdown.vim"
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot/syntax)
chdir(/Users/tran/Documents/book-tc)
line 13: sourcing "/Users/tran/.config/nvim/plugged/vim-polyglot/syntax/html.vim"
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot/syntax)
chdir(/Users/tran/Documents/book-tc)
line 226: sourcing "/Users/tran/.config/nvim/plugged/vim-polyglot/syntax/javascript.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-polyglot/syntax/javascript.vim
continuing in /Users/tran/.config/nvim/plugged/vim-polyglot/syntax/html.vim
chdir(/Users/tran/Documents/book-tc)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax)
chdir(/Users/tran/Documents/book-tc)
line 226: sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/javascript.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/javascript.vim
continuing in /Users/tran/.config/nvim/plugged/vim-polyglot/syntax/html.vim
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot/after/syntax)
chdir(/Users/tran/Documents/book-tc)
line 226: sourcing "/Users/tran/.config/nvim/plugged/vim-polyglot/after/syntax/javascript.vim"
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot/after/syntax)
chdir(/Users/tran/Documents/book-tc)
line 9: sourcing "/Users/tran/.config/nvim/plugged/vim-polyglot/after/syntax/jsx.vim"
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot/after/syntax)
chdir(/Users/tran/Documents/book-tc)
line 54: sourcing "/Users/tran/.config/nvim/plugged/vim-polyglot/after/syntax/jsx_pretty.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-polyglot/after/syntax/jsx_pretty.vim
continuing in /Users/tran/.config/nvim/plugged/vim-polyglot/after/syntax/jsx.vim
finished sourcing /Users/tran/.config/nvim/plugged/vim-polyglot/after/syntax/jsx.vim
continuing in /Users/tran/.config/nvim/plugged/vim-polyglot/after/syntax/javascript.vim
finished sourcing /Users/tran/.config/nvim/plugged/vim-polyglot/after/syntax/javascript.vim
continuing in /Users/tran/.config/nvim/plugged/vim-polyglot/syntax/html.vim
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot/syntax)
chdir(/Users/tran/Documents/book-tc)
line 251: sourcing "/Users/tran/.config/nvim/plugged/vim-polyglot/syntax/vb.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-polyglot/syntax/vb.vim
continuing in /Users/tran/.config/nvim/plugged/vim-polyglot/syntax/html.vim
chdir(/Users/tran/Documents/book-tc)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax)
chdir(/Users/tran/Documents/book-tc)
line 251: sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/vb.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/vb.vim
continuing in /Users/tran/.config/nvim/plugged/vim-polyglot/syntax/html.vim
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot/syntax)
chdir(/Users/tran/Documents/book-tc)
line 261: sourcing "/Users/tran/.config/nvim/plugged/vim-polyglot/syntax/css.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-polyglot/syntax/css.vim
continuing in /Users/tran/.config/nvim/plugged/vim-polyglot/syntax/html.vim
chdir(/Users/tran/Documents/book-tc)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax)
chdir(/Users/tran/Documents/book-tc)
line 261: sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/css.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/css.vim
continuing in /Users/tran/.config/nvim/plugged/vim-polyglot/syntax/html.vim
finished sourcing /Users/tran/.config/nvim/plugged/vim-polyglot/syntax/html.vim
continuing in /Users/tran/.config/nvim/plugged/vim-markdown/syntax/markdown.vim
chdir(/Users/tran/Documents/book-tc)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax)
chdir(/Users/tran/Documents/book-tc)
line 13: sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/html.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/html.vim
continuing in /Users/tran/.config/nvim/plugged/vim-markdown/syntax/markdown.vim
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot/after/syntax)
chdir(/Users/tran/Documents/book-tc)
line 13: sourcing "/Users/tran/.config/nvim/plugged/vim-polyglot/after/syntax/html.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-polyglot/after/syntax/html.vim
continuing in /Users/tran/.config/nvim/plugged/vim-markdown/syntax/markdown.vim
finished sourcing /Users/tran/.config/nvim/plugged/vim-markdown/syntax/markdown.vim
continuing in function <SNR>16_SynSet
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot/syntax)
chdir(/Users/tran/Documents/book-tc)
line 24: sourcing "/Users/tran/.config/nvim/plugged/vim-polyglot/syntax/markdown.vim"
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot/syntax)
chdir(/Users/tran/Documents/book-tc)
line 17: sourcing "/Users/tran/.config/nvim/plugged/vim-polyglot/syntax/html.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-polyglot/syntax/html.vim
continuing in /Users/tran/.config/nvim/plugged/vim-polyglot/syntax/markdown.vim
chdir(/Users/tran/Documents/book-tc)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax)
chdir(/Users/tran/Documents/book-tc)
line 17: sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/html.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/html.vim
continuing in /Users/tran/.config/nvim/plugged/vim-polyglot/syntax/markdown.vim
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot/after/syntax)
chdir(/Users/tran/Documents/book-tc)
line 17: sourcing "/Users/tran/.config/nvim/plugged/vim-polyglot/after/syntax/html.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-polyglot/after/syntax/html.vim
continuing in /Users/tran/.config/nvim/plugged/vim-polyglot/syntax/markdown.vim
finished sourcing /Users/tran/.config/nvim/plugged/vim-polyglot/syntax/markdown.vim
continuing in function <SNR>16_SynSet
chdir(/Users/tran/Documents/book-tc)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax)
chdir(/Users/tran/Documents/book-tc)
line 24: sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/markdown.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/markdown.vim
continuing in function <SNR>16_SynSet
Executing Syntax Autocommands for "*"
autocommand call s:InitColor()

Executing FileType Autocommands for "*"
autocommand call <SID>setup()

Executing FileType Autocommands for "*"
autocommand call ale#events#FileTypeEvent(   str2nr(expand('<abuf>')),   expand('<amatch>'))

Executing FileType Autocommands for "*"
autocommand call s:Autocmd('FileType', expand('<amatch>'), +expand('<abuf>'))

Executing FileType Autocommands for "*"
autocommand call <SID>SetupAutoCommands()

Executing FileType Autocommands for "*"
autocommand call s:Disable()

Executing FileType Autocommands for "*"
autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/tagbar/autoload/tagbar/prototypes)
chdir(/Users/tran/Documents/book-tc)
line 37: sourcing "/Users/tran/.config/nvim/plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim"
finished sourcing /Users/tran/.config/nvim/plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim
continuing in function <SNR>132_AutoUpdate[63]..<SNR>132_ProcessFile
Executing command: "'/usr/local/bin/zsh' '-c' ''/Users/tran/code/github/markdown2ctags/markdown2ctags.py'  -f - --sort=yes --sro=»  '/var/folders/jn/7jlp804x74j9y5zw57ch3v0m0000gn/T/nvimHTA9Wm/4.md''"


chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/tagbar/autoload/tagbar/prototypes)
chdir(/Users/tran/Documents/book-tc)
line 4: sourcing "/Users/tran/.config/nvim/plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim"
finished sourcing /Users/tran/.config/nvim/plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim
continuing in function <SNR>132_AutoUpdate[63]..<SNR>132_ProcessFile[116]..<SNR>132_ParseTagline[76]..<SNR>132_ProcessTag
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/tagbar/autoload/tagbar/prototypes)
chdir(/Users/tran/Documents/book-tc)
line 1: sourcing "/Users/tran/.config/nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim"
finished sourcing /Users/tran/.config/nvim/plugged/tagbar/autoload/tagbar/prototypes/basetag.vim
continuing in function <SNR>132_AutoUpdate[63]..<SNR>132_ProcessFile[116]..<SNR>132_ParseTagline[76]..<SNR>132_ProcessTag[4]..tagbar#prototypes#normaltag#new
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/tagbar/autoload/tagbar)
chdir(/Users/tran/Documents/book-tc)
line 4: sourcing "/Users/tran/.config/nvim/plugged/tagbar/autoload/tagbar/sorting.vim"
finished sourcing /Users/tran/.config/nvim/plugged/tagbar/autoload/tagbar/sorting.vim
continuing in function <SNR>132_AutoUpdate[63]..<SNR>132_ProcessFile[151]..<SNR>179_sortTags
Executing BufReadPost Autocommands for "*.md"
autocommand setf markdown

Executing BufReadPost Autocommands for "*"
autocommand if (&ft == "" || &ft == "conf") && expand("<afile>:e") == "" | call polyglot#shebang#Detect() | endif

Executing BufReadPost Autocommands for "*"
autocommand if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat | runtime! scripts.vim | endif

Executing BufReadPost Autocommands for "*.md"
autocommand setf markdown

Executing BufReadPost Autocommands for "*"
autocommand if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

Executing BufReadPost Autocommands for "*"
autocommand if !exists('b:delimitMate_was_here') |   call <SID>setup() |   let b:delimitMate_was_here = 1 | endif

Executing BufReadPost Autocommands for "*"
autocommand call gutentags#setup_gutentags()

chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-gutentags/autoload/gutentags)
chdir(/Users/tran/Documents/book-tc)
line 63: sourcing "/Users/tran/.config/nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim
continuing in function gutentags#setup_gutentags
Executing BufReadPost Autocommands for "*"
autocommand call ale#events#ReadOrEnterEvent(str2nr(expand('<abuf>')))

Executing BufReadPost Autocommands for "*"
autocommand call s:Autocmd('BufCreate', +expand('<abuf>'))

Executing BufReadPost Autocommands for "*.md"
autocommand call s:autoload()

chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki)
chdir(/Users/tran/Documents/book-tc)
line 3: sourcing "/Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/buffer.vim"
finished sourcing /Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/buffer.vim
continuing in function <SNR>76_autoload
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/wiki.vim/autoload)
chdir(/Users/tran/Documents/book-tc)
line 11: sourcing "/Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki.vim"
finished sourcing /Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki.vim
continuing in function <SNR>76_autoload[3]..wiki#buffer#init
Executing BufReadPost Autocommands for "*.md"
autocommand call roam#graph#update_backlink_buffer()

chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-roam/autoload/roam)
chdir(/Users/tran/Documents/book-tc)
line 0: sourcing "/Users/tran/.config/nvim/plugged/vim-roam/autoload/roam/graph.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-roam/autoload/roam/graph.vim
continuing in BufReadPost Autocommands for "*.md"
Executing BufReadPost Autocommands for "*"
autocommand call s:UseConfigFiles()

chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/editorconfig-vim/autoload)
chdir(/Users/tran/Documents/book-tc)
line 4: sourcing "/Users/tran/.config/nvim/plugged/editorconfig-vim/autoload/editorconfig_core.vim"
finished sourcing /Users/tran/.config/nvim/plugged/editorconfig-vim/autoload/editorconfig_core.vim
continuing in function <SNR>84_UseConfigFiles[28]..<SNR>84_Initialize[18]..<SNR>84_InitializeVimCore
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/editorconfig-vim/autoload/editorconfig_core)
chdir(/Users/tran/Documents/book-tc)
line 3: sourcing "/Users/tran/.config/nvim/plugged/editorconfig-vim/autoload/editorconfig_core/handler.vim"
finished sourcing /Users/tran/.config/nvim/plugged/editorconfig-vim/autoload/editorconfig_core/handler.vim
continuing in function <SNR>84_UseConfigFiles[46]..<SNR>84_UseConfigFiles_VimCore
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/editorconfig-vim/autoload/editorconfig_core)
chdir(/Users/tran/Documents/book-tc)
line 4: sourcing "/Users/tran/.config/nvim/plugged/editorconfig-vim/autoload/editorconfig_core/util.vim"
finished sourcing /Users/tran/.config/nvim/plugged/editorconfig-vim/autoload/editorconfig_core/util.vim
continuing in function <SNR>84_UseConfigFiles[46]..<SNR>84_UseConfigFiles_VimCore[3]..editorconfig_core#handler#get_configurations[32]..<SNR>188_get_filenames
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/editorconfig-vim/autoload/editorconfig_core)
chdir(/Users/tran/Documents/book-tc)
line 42: sourcing "/Users/tran/.config/nvim/plugged/editorconfig-vim/autoload/editorconfig_core/ini.vim"
finished sourcing /Users/tran/.config/nvim/plugged/editorconfig-vim/autoload/editorconfig_core/ini.vim
continuing in function <SNR>84_UseConfigFiles[46]..<SNR>84_UseConfigFiles_VimCore[3]..editorconfig_core#handler#get_configurations
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/editorconfig-vim/autoload/editorconfig_core)
chdir(/Users/tran/Documents/book-tc)
line 38: sourcing "/Users/tran/.config/nvim/plugged/editorconfig-vim/autoload/editorconfig_core/fnmatch.vim"
finished sourcing /Users/tran/.config/nvim/plugged/editorconfig-vim/autoload/editorconfig_core/fnmatch.vim
continuing in function <SNR>84_UseConfigFiles[46]..<SNR>84_UseConfigFiles_VimCore[3]..editorconfig_core#handler#get_configurations[42]..editorconfig_core#ini#read_ini_file[10]..<SNR>190_parse[47]..<SNR>190_matches_filename
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/editorconfig-vim/autoload)
chdir(/Users/tran/Documents/book-tc)
line 127: sourcing "/Users/tran/.config/nvim/plugged/editorconfig-vim/autoload/editorconfig.vim"
finished sourcing /Users/tran/.config/nvim/plugged/editorconfig-vim/autoload/editorconfig.vim
continuing in function <SNR>84_UseConfigFiles[46]..<SNR>84_UseConfigFiles_VimCore[5]..<SNR>84_ApplyConfig
Executing BufReadPost Autocommands for "*"
autocommand call FugitiveDetect(expand('<amatch>:p'))

Executing User Autocommands for "Fugitive"
autocommand if expand('%:p') =~# '\.git[\/].*MSG$' &&   exists('+omnifunc') &&   &omnifunc =~# '^\%(syntaxcomplete#Complete\)\=$' &&   !empty(gitlab#homepage_for_remote(FugitiveRemoteUrl())) |   setlocal omnifunc=gitlab#omnifunc | endif

Executing User Autocommands for "Fugitive"
autocommand if expand('%:p') =~# '\.git[\/].*MSG$' &&   exists('+omnifunc') &&   &omnifunc =~# '^\%(syntaxcomplete#Complete\)\=$' &&   !empty(filter(s:Config(),     '!empty(rhubarb#HomepageForUrl(matchstr(v:val, ''^\s*url\s*=\s*"\=\zs\S*'')))')) |   setlocal omnifunc=rhubarb#Complete | endif

Executing BufReadPost Autocommands for "*"
autocommand call s:InitColor()

Executing BufReadPost Autocommands for "*"
autocommand exe s:TempReadPost(expand('<amatch>:p'))

Executing BufReadPost Autocommands for "*"
autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

Executing BufEnter Autocommands for "*"
autocommand call s:detect_indent()

Executing command: "unset nonomatch; print -N >/var/folders/jn/7jlp804x74j9y5zw57ch3v0m0000gn/T/nvimHTA9Wm/5 /Users/tran/Documents/book-tc/{*.md,*.markdown,*.mdown,*.mdwn,*.mkd,*.mkdn,*.mkdown,*.ronn,*.scd,*.workbook,contents.lr,.git,.svn,.hg}"

Executing command: "unset nonomatch; print -N >/var/folders/jn/7jlp804x74j9y5zw57ch3v0m0000gn/T/nvimHTA9Wm/6 /Users/tran/Documents/{*.md,*.markdown,*.mdown,*.mdwn,*.mkd,*.mkdn,*.mkdown,*.ronn,*.scd,*.workbook,contents.lr,.git,.svn,.hg}"

Executing BufEnter Autocommands for "*"
autocommand :syntax sync fromstart

Executing BufEnter Autocommands for "*"
autocommand call <SID>UpdateList('BufEnter')

Executing BufEnter Autocommands for "*"
autocommand if !exists('b:delimitMate_was_here') |   call <SID>setup() |   let b:delimitMate_was_here = 1 | endif

Executing BufEnter Autocommands for "*"
autocommand call lightline#update()

Executing BufEnter Autocommands for "*"
autocommand if &previewwindow |     if !exists('b:quickr_preview_modifiable') |         let b:quickr_preview_modifiable = &modifiable |         let &modifiable = 0 |    endif | endif

Executing BufEnter Autocommands for "*"
autocommand call ale#events#ReadOrEnterEvent(str2nr(expand('<abuf>')))

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand let s:buf_path = expand("%") | if isdirectory(s:buf_path) | bdelete! | call timer_start(100, {->OpenLfIn(s:buf_path, s:default_edit_cmd)}) | endif

Executing BufEnter Autocommands for "*"
autocommand if expand('%') ==# '' && &previewwindow && pumvisible() && getbufvar('#', '&omnifunc') ==# 'gitlab#omnifunc' |    setlocal nolist linebreak filetype=markdown | endif

Executing BufEnter Autocommands for "*"
autocommand if expand('%') ==# '' && &previewwindow && pumvisible() && getbufvar('#', '&omnifunc') ==# 'rhubarb#omnifunc' |    setlocal nolist linebreak filetype=markdown | endif

Executing BufEnter Autocommands for "*"
autocommand call s:on_bufenter()

chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-gitgutter/autoload/gitgutter)
chdir(/Users/tran/Documents/book-tc)
line 9: sourcing "/Users/tran/.config/nvim/plugged/vim-gitgutter/autoload/gitgutter/async.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-gitgutter/autoload/gitgutter/async.vim
continuing in function <SNR>94_on_bufenter[22]..gitgutter#process_buffer[10]..<SNR>128_setup_path[3]..gitgutter#utility#set_repo_path
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-gitgutter/autoload/gitgutter)
chdir(/Users/tran/Documents/book-tc)
line 1: sourcing "/Users/tran/.config/nvim/plugged/vim-gitgutter/autoload/gitgutter/debug.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-gitgutter/autoload/gitgutter/debug.vim
continuing in function <SNR>94_on_bufenter[22]..gitgutter#process_buffer[10]..<SNR>128_setup_path[3]..gitgutter#utility#set_repo_path[12]..gitgutter#async#execute
Executing BufEnter Autocommands for "*"
autocommand if expand('<amatch>') !~ '__Tagbar__.*' |     let s:last_alt_bufnr = bufnr('#') | endif

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

Executing BufWinEnter Autocommands for "*"
autocommand if &ft == "" && expand("<afile>:e") == "" | call s:Observe('shebang#Detect') | endif

Executing BufWinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing BufWinEnter Autocommands for "*"
autocommand call s:Autocmd('BufWinEnter', +expand('<abuf>'), win_getid())

Executing BufWinEnter Autocommands for "*"
autocommand call <SID>SetupAutoCommands()

Executing BufWinEnter Autocommands for "*"
autocommand call s:IndentLinesDisable() | call s:LeadingSpaceDisable() | call s:Setup()

Executing BufWinEnter Autocommands for "*"
autocommand if s:can_diffoff(+expand('<abuf>')) && s:diff_window_count() == 1 |   call s:diffoff() | endif

Executing BufWinEnter Autocommands for "<buffer=2>"
autocommand call s:MarkdownRefreshSyntax(1)

autocommand call s:MarkdownSetupFolding()

chdir(/Users/tran/Documents/book-tc)
Executing DirChanged Autocommands for "*"
autocommand call s:Autocmd('DirChanged', get(v:event, 'cwd', ''))

Executing DirChanged Autocommands for "*"
autocommand call rpcnotify(4, "python_chdir", v:event.cwd)

/Users/tran/Documents/book-tc
Executing BufUnload Autocommands for "*"
autocommand call s:Autocmd('BufUnload', +expand('<abuf>'))

Executing BufDelete Autocommands for "*"
autocommand silent! call remove(g:fzf#vim#buffers, expand('<abuf>'))

Executing BufDelete Autocommands for "*"
autocommand call lightline#update()

Executing BufDelete Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#engine#Cleanup(str2nr(expand('<abuf>'))) | endif

Executing BufDelete Autocommands for "*"
autocommand call s:RunBufDelete(expand('<abuf>'))

Executing BufDelete Autocommands for "*"
autocommand if getbufvar(+expand('<abuf>'), 'buftype') ==# 'terminal' |   if !empty(FugitiveGitDir(+expand('<abuf>'))) |     call fugitive#ReloadStatus(+expand('<abuf>'), 1) |   else |     call fugitive#ReloadStatus(-2, 0) |  endif | endif

Executing BufDelete Autocommands for "*"
autocommand call s:HandleBufDelete(expand('<afile>'), expand('<abuf>'))

Executing BufWipeout Autocommands for "*"
autocommand exe s:TempDelete(  expand('<amatch>:p'))

Executing BufWipeout Autocommands for "*"
autocommand call s:HandleBufDelete(expand('<afile>'), expand('<abuf>'))

auto-removing autocommand: CursorHold <buffer=1>
auto-removing autocommand: CursorHoldI <buffer=1>
Executing SessionLoadPost Autocommands for "*"
autocommand call lightline#update()

autocommand call lightline#highlight()

Executing SessionLoadPost Autocommands for "*"
autocommand call tagbar#RestoreSession()

finished sourcing /Users/tran/.config/nvim/session/book-tc.vim
continuing in function xolox#session#open_cmd
session.vim 2.13.1: Opened global 'book-tc' session in 0.77 seconds.
session.vim 2.13.1: Opened global 'book-tc' session from ~/.config/nvim/session/book-tc.vim.
Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing FocusLost Autocommands for "*"
autocommand let s:focus_was_lost = 1

Executing CursorHold Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619608973 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 45 seconds).
Executing CursorHold Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

autocommand if exists('*ale#lsp#Send') | call ale#hover#ShowTruncatedMessageAtCursor() | endif

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'))

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

Executing CursorHold Autocommands for "*"
autocommand silent! checktime

Executing CursorHold Autocommands for "*"
autocommand call s:do_delayed_update()

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

Executing CursorHold Autocommands for "<buffer=2>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorHold Autocommands for "*"
autocommand call s:clear_message()


Executing FocusGained Autocommands for "*"
autocommand if mode() !~# '^c' | call s:Autocmd('FocusGained') | endif

Executing FocusGained Autocommands for "*"
autocommand if s:focus_was_lost | let s:focus_was_lost = 0 | call gitgutter#all(1) | endif

chdir(/Users/tran/Documents/book-tc)
chdir(internal_tools)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(internal_tools)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(deployment)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(odoo_basics)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(odoo_basics)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(odoo_basics)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(odoo_basics)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(odoo_basics)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(internal_tools)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(internal_tools)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(deployment)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(misc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(misc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(misc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(misc)
chdir(/Users/tran/Documents/book-tc)
Executing FocusGained Autocommands for "*"
autocommand call fugitive#ReloadStatus(-2, 0)

Executing FocusLost Autocommands for "*"
autocommand let s:focus_was_lost = 1

Executing FocusGained Autocommands for "*"
autocommand if mode() !~# '^c' | call s:Autocmd('FocusGained') | endif

Executing FocusGained Autocommands for "*"
autocommand if s:focus_was_lost | let s:focus_was_lost = 0 | call gitgutter#all(1) | endif

chdir(/Users/tran/Documents/book-tc)
chdir(internal_tools)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(internal_tools)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(deployment)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(odoo_basics)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(odoo_basics)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(odoo_basics)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(odoo_basics)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(odoo_basics)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(internal_tools)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(internal_tools)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(deployment)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(misc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(misc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(misc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(misc)
chdir(/Users/tran/Documents/book-tc)
Executing FocusGained Autocommands for "*"
autocommand call fugitive#ReloadStatus(-2, 0)


Executing command: "'/usr/local/bin/zsh' '-c' 'tmux -S /private/tmp/tmux-501/default display-message -p '#{window_zoomed_flag}''"


Executing command: "'/usr/local/bin/zsh' '-c' 'tmux -S /private/tmp/tmux-501/default select-pane -t '%19' -R'"


Executing FocusLost Autocommands for "*"
autocommand let s:focus_was_lost = 1

Executing FocusGained Autocommands for "*"
autocommand if mode() !~# '^c' | call s:Autocmd('FocusGained') | endif

Executing FocusGained Autocommands for "*"
autocommand if s:focus_was_lost | let s:focus_was_lost = 0 | call gitgutter#all(1) | endif

chdir(/Users/tran/Documents/book-tc)
chdir(internal_tools)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(internal_tools)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(deployment)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(odoo_basics)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(odoo_basics)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(odoo_basics)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(odoo_basics)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(odoo_basics)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(internal_tools)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(internal_tools)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(deployment)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(misc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(misc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(misc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(misc)
chdir(/Users/tran/Documents/book-tc)
Executing FocusGained Autocommands for "*"
autocommand call fugitive#ReloadStatus(-2, 0)


Executing command: "'/usr/local/bin/zsh' '-c' 'tmux -S /private/tmp/tmux-501/default display-message -p '#{window_zoomed_flag}''"


Executing command: "'/usr/local/bin/zsh' '-c' 'tmux -S /private/tmp/tmux-501/default select-pane -t '%19' -R'"


Executing FocusLost Autocommands for "*"
autocommand let s:focus_was_lost = 1

Executing FocusGained Autocommands for "*"
autocommand if mode() !~# '^c' | call s:Autocmd('FocusGained') | endif

Executing FocusGained Autocommands for "*"
autocommand if s:focus_was_lost | let s:focus_was_lost = 0 | call gitgutter#all(1) | endif

chdir(/Users/tran/Documents/book-tc)
chdir(internal_tools)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(internal_tools)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(deployment)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(odoo_basics)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(odoo_basics)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(odoo_basics)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(odoo_basics)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(odoo_basics)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(internal_tools)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(internal_tools)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(deployment)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(misc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(misc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(misc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(misc)
chdir(/Users/tran/Documents/book-tc)
Executing FocusGained Autocommands for "*"
autocommand call fugitive#ReloadStatus(-2, 0)

Executing CursorHold Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619608973 ..
vim-misc 1.17.6: Running handler xolox#session#auto_save_periodic ..
Executing CursorHold Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

autocommand if exists('*ale#lsp#Send') | call ale#hover#ShowTruncatedMessageAtCursor() | endif

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'))

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

Executing CursorHold Autocommands for "*"
autocommand silent! checktime

Executing CursorHold Autocommands for "*"
autocommand call s:do_delayed_update()

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

Executing CursorHold Autocommands for "<buffer=2>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()


Executing command: "'/usr/local/bin/zsh' '-c' 'tmux -S /private/tmp/tmux-501/default display-message -p '#{window_zoomed_flag}''"


Executing command: "'/usr/local/bin/zsh' '-c' 'tmux -S /private/tmp/tmux-501/default select-pane -t '%19' -R'"


Executing FocusLost Autocommands for "*"
autocommand let s:focus_was_lost = 1

Executing CursorHold Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619609663 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 60 seconds).
Executing CursorHold Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

autocommand if exists('*ale#lsp#Send') | call ale#hover#ShowTruncatedMessageAtCursor() | endif

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'))

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

Executing CursorHold Autocommands for "*"
autocommand silent! checktime

Executing CursorHold Autocommands for "*"
autocommand call s:do_delayed_update()

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

Executing CursorHold Autocommands for "<buffer=2>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorHold Autocommands for "*"
autocommand call s:clear_message()


Executing FocusGained Autocommands for "*"
autocommand if mode() !~# '^c' | call s:Autocmd('FocusGained') | endif

Executing FocusGained Autocommands for "*"
autocommand if s:focus_was_lost | let s:focus_was_lost = 0 | call gitgutter#all(1) | endif

chdir(/Users/tran/Documents/book-tc)
chdir(internal_tools)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(internal_tools)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(deployment)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(odoo_basics)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(odoo_basics)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(odoo_basics)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(odoo_basics)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(odoo_basics)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(internal_tools)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(internal_tools)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(deployment)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(misc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(misc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(misc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(misc)
chdir(/Users/tran/Documents/book-tc)
Executing FocusGained Autocommands for "*"
autocommand call fugitive#ReloadStatus(-2, 0)

Executing FocusLost Autocommands for "*"
autocommand let s:focus_was_lost = 1

Executing FocusGained Autocommands for "*"
autocommand if mode() !~# '^c' | call s:Autocmd('FocusGained') | endif

Executing FocusGained Autocommands for "*"
autocommand if s:focus_was_lost | let s:focus_was_lost = 0 | call gitgutter#all(1) | endif

chdir(/Users/tran/Documents/book-tc)
chdir(internal_tools)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(internal_tools)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(deployment)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(odoo_basics)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(odoo_basics)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(odoo_basics)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(odoo_basics)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(odoo_basics)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(internal_tools)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(internal_tools)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(deployment)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(misc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(misc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(misc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(misc)
chdir(/Users/tran/Documents/book-tc)
Executing FocusGained Autocommands for "*"
autocommand call fugitive#ReloadStatus(-2, 0)

Executing VimResized Autocommands for "*"
autocommand call s:Autocmd('VimResized', &columns, &lines)

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619609663 ..
vim-misc 1.17.6: Running handler xolox#session#auto_save_periodic ..
Executing CursorHold Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

autocommand if exists('*ale#lsp#Send') | call ale#hover#ShowTruncatedMessageAtCursor() | endif

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'))

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

Executing CursorHold Autocommands for "*"
autocommand silent! checktime

Executing CursorHold Autocommands for "*"
autocommand call s:do_delayed_update()

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

Executing CursorHold Autocommands for "<buffer=2>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665786 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 57 seconds).
Executing CursorHold Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

autocommand if exists('*ale#lsp#Send') | call ale#hover#ShowTruncatedMessageAtCursor() | endif

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'))

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

Executing CursorHold Autocommands for "*"
autocommand silent! checktime

Executing CursorHold Autocommands for "*"
autocommand call s:do_delayed_update()

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

Executing CursorHold Autocommands for "<buffer=2>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorHold Autocommands for "*"
autocommand call s:clear_message()


Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing command: "'/usr/bin/pbcopy'"


Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665786 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 56 seconds).
Executing CursorHold Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

autocommand if exists('*ale#lsp#Send') | call ale#hover#ShowTruncatedMessageAtCursor() | endif

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'))

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

Executing CursorHold Autocommands for "*"
autocommand silent! checktime

Executing CursorHold Autocommands for "*"
autocommand call s:do_delayed_update()

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

Executing CursorHold Autocommands for "<buffer=2>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing command: "'/usr/bin/pbcopy'"


Executing command: "'/usr/bin/pbpaste'"


Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665786 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 55 seconds).
Executing CursorHold Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

autocommand if exists('*ale#lsp#Send') | call ale#hover#ShowTruncatedMessageAtCursor() | endif

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'))

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

Executing CursorHold Autocommands for "*"
autocommand silent! checktime

Executing CursorHold Autocommands for "*"
autocommand call s:do_delayed_update()

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

Executing CursorHold Autocommands for "<buffer=2>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorHold Autocommands for "*"
autocommand call s:clear_message()

-- VISUAL --
Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing command: "'/usr/bin/pbcopy'"


Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "<buffer=2>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()
-- INSERT --
Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/ultisnips/autoload)
chdir(/Users/tran/Documents/book-tc)
line 0: sourcing "/Users/tran/.config/nvim/plugged/ultisnips/autoload/UltiSnips.vim"
finished sourcing /Users/tran/.config/nvim/plugged/ultisnips/autoload/UltiSnips.vim
continuing in TextChangedI Autocommands for "*"
Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHoldI Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665786 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 53 seconds).
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

Executing CursorHoldI Autocommands for "*"
autocommand call s:do_delayed_update()

Executing CursorHoldI Autocommands for "<buffer=2>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki)
chdir(/Users/tran/Documents/book-tc)
line 2: sourcing "/Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/complete.vim"
finished sourcing /Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/complete.vim
continuing in function coc#source#wiki#should_complete
Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHoldI Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665786 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 51 seconds).
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

Executing CursorHoldI Autocommands for "*"
autocommand call s:do_delayed_update()

Executing CursorHoldI Autocommands for "<buffer=2>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorHoldI Autocommands for "*"
autocommand call s:clear_message()

-- INSERT --

Executing InsertLeave Autocommands for "*"
autocommand if &l:diff | diffupdate | endif

Executing InsertLeave Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarning() | endif

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing InsertLeave Autocommands for "<buffer=2>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665786 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 51 seconds).
Executing CursorHold Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

autocommand if exists('*ale#lsp#Send') | call ale#hover#ShowTruncatedMessageAtCursor() | endif

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'))

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

Executing CursorHold Autocommands for "*"
autocommand silent! checktime

Executing CursorHold Autocommands for "*"
autocommand call s:do_delayed_update()

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

Executing CursorHold Autocommands for "<buffer=2>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'))

"index.md" 
"index.md" 31L, 514C written
Executing BufWritePost Autocommands for "*"
autocommand if (&ft == "" || &ft == "conf") && expand("<afile>:e") == "" | call polyglot#shebang#Detect() | endif

autocommand au! polyglot-observer

Executing BufWritePost Autocommands for "*"
autocommand if &l:foldmethod ==# 'manual' && exists('b:foldmethod_save')|   let &l:foldmethod = b:foldmethod_save|   execute 'normal! zx'| endif

Executing BufWritePost Autocommands for "*"
autocommand call ale#events#SaveEvent(str2nr(expand('<abuf>')))

chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/ale/autoload)
chdir(/Users/tran/Documents/book-tc)
line 1: sourcing "/Users/tran/.config/nvim/plugged/ale/autoload/ale.vim"
finished sourcing /Users/tran/.config/nvim/plugged/ale/autoload/ale.vim
continuing in function ale#events#SaveEvent
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/ale/autoload/ale)
chdir(/Users/tran/Documents/book-tc)
line 44: sourcing "/Users/tran/.config/nvim/plugged/ale/autoload/ale/util.vim"
finished sourcing /Users/tran/.config/nvim/plugged/ale/autoload/ale/util.vim
continuing in function ale#events#SaveEvent[13]..ale#Queue[15]..ale#ShouldDoNothing
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/ale/autoload/ale)
chdir(/Users/tran/Documents/book-tc)
line 3: sourcing "/Users/tran/.config/nvim/plugged/ale/autoload/ale/linter.vim"
finished sourcing /Users/tran/.config/nvim/plugged/ale/autoload/ale/linter.vim
continuing in function ale#events#SaveEvent[13]..ale#Queue[33]..<SNR>197_Lint
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/ale/ale_linters/markdown)
chdir(/Users/tran/Documents/book-tc)
line 12: sourcing "/Users/tran/.config/nvim/plugged/ale/ale_linters/markdown/alex.vim"
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/ale/autoload/ale/handlers)
chdir(/Users/tran/Documents/book-tc)
line 4: sourcing "/Users/tran/.config/nvim/plugged/ale/autoload/ale/handlers/alex.vim"
finished sourcing /Users/tran/.config/nvim/plugged/ale/autoload/ale/handlers/alex.vim
continuing in /Users/tran/.config/nvim/plugged/ale/ale_linters/markdown/alex.vim
finished sourcing /Users/tran/.config/nvim/plugged/ale/ale_linters/markdown/alex.vim
continuing in function ale#events#SaveEvent[13]..ale#Queue[33]..<SNR>197_Lint[3]..ale#linter#Get[7]..ale#linter#GetAll
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/ale/ale_linters/markdown)
chdir(/Users/tran/Documents/book-tc)
line 12: sourcing "/Users/tran/.config/nvim/plugged/ale/ale_linters/markdown/languagetool.vim"
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/ale/autoload/ale/handlers)
chdir(/Users/tran/Documents/book-tc)
line 5: sourcing "/Users/tran/.config/nvim/plugged/ale/autoload/ale/handlers/languagetool.vim"
finished sourcing /Users/tran/.config/nvim/plugged/ale/autoload/ale/handlers/languagetool.vim
continuing in /Users/tran/.config/nvim/plugged/ale/ale_linters/markdown/languagetool.vim
finished sourcing /Users/tran/.config/nvim/plugged/ale/ale_linters/markdown/languagetool.vim
continuing in function ale#events#SaveEvent[13]..ale#Queue[33]..<SNR>197_Lint[3]..ale#linter#Get[7]..ale#linter#GetAll
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/ale/ale_linters/markdown)
chdir(/Users/tran/Documents/book-tc)
line 12: sourcing "/Users/tran/.config/nvim/plugged/ale/ale_linters/markdown/markdownlint.vim"
finished sourcing /Users/tran/.config/nvim/plugged/ale/ale_linters/markdown/markdownlint.vim
continuing in function ale#events#SaveEvent[13]..ale#Queue[33]..<SNR>197_Lint[3]..ale#linter#Get[7]..ale#linter#GetAll
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/ale/ale_linters/markdown)
chdir(/Users/tran/Documents/book-tc)
line 12: sourcing "/Users/tran/.config/nvim/plugged/ale/ale_linters/markdown/mdl.vim"
finished sourcing /Users/tran/.config/nvim/plugged/ale/ale_linters/markdown/mdl.vim
continuing in function ale#events#SaveEvent[13]..ale#Queue[33]..<SNR>197_Lint[3]..ale#linter#Get[7]..ale#linter#GetAll
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/ale/ale_linters/markdown)
chdir(/Users/tran/Documents/book-tc)
line 12: sourcing "/Users/tran/.config/nvim/plugged/ale/ale_linters/markdown/proselint.vim"
finished sourcing /Users/tran/.config/nvim/plugged/ale/ale_linters/markdown/proselint.vim
continuing in function ale#events#SaveEvent[13]..ale#Queue[33]..<SNR>197_Lint[3]..ale#linter#Get[7]..ale#linter#GetAll
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/ale/ale_linters/markdown)
chdir(/Users/tran/Documents/book-tc)
line 12: sourcing "/Users/tran/.config/nvim/plugged/ale/ale_linters/markdown/redpen.vim"
finished sourcing /Users/tran/.config/nvim/plugged/ale/ale_linters/markdown/redpen.vim
continuing in function ale#events#SaveEvent[13]..ale#Queue[33]..<SNR>197_Lint[3]..ale#linter#Get[7]..ale#linter#GetAll
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/ale/ale_linters/markdown)
chdir(/Users/tran/Documents/book-tc)
line 12: sourcing "/Users/tran/.config/nvim/plugged/ale/ale_linters/markdown/remark_lint.vim"
finished sourcing /Users/tran/.config/nvim/plugged/ale/ale_linters/markdown/remark_lint.vim
continuing in function ale#events#SaveEvent[13]..ale#Queue[33]..<SNR>197_Lint[3]..ale#linter#Get[7]..ale#linter#GetAll
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/ale/ale_linters/markdown)
chdir(/Users/tran/Documents/book-tc)
line 12: sourcing "/Users/tran/.config/nvim/plugged/ale/ale_linters/markdown/textlint.vim"
finished sourcing /Users/tran/.config/nvim/plugged/ale/ale_linters/markdown/textlint.vim
continuing in function ale#events#SaveEvent[13]..ale#Queue[33]..<SNR>197_Lint[3]..ale#linter#Get[7]..ale#linter#GetAll
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/ale/ale_linters/markdown)
chdir(/Users/tran/Documents/book-tc)
line 12: sourcing "/Users/tran/.config/nvim/plugged/ale/ale_linters/markdown/vale.vim"
finished sourcing /Users/tran/.config/nvim/plugged/ale/ale_linters/markdown/vale.vim
continuing in function ale#events#SaveEvent[13]..ale#Queue[33]..<SNR>197_Lint[3]..ale#linter#Get[7]..ale#linter#GetAll
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/ale/ale_linters/markdown)
chdir(/Users/tran/Documents/book-tc)
line 12: sourcing "/Users/tran/.config/nvim/plugged/ale/ale_linters/markdown/writegood.vim"
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/ale/autoload/ale/handlers)
chdir(/Users/tran/Documents/book-tc)
line 4: sourcing "/Users/tran/.config/nvim/plugged/ale/autoload/ale/handlers/writegood.vim"
finished sourcing /Users/tran/.config/nvim/plugged/ale/autoload/ale/handlers/writegood.vim
continuing in /Users/tran/.config/nvim/plugged/ale/ale_linters/markdown/writegood.vim
finished sourcing /Users/tran/.config/nvim/plugged/ale/ale_linters/markdown/writegood.vim
continuing in function ale#events#SaveEvent[13]..ale#Queue[33]..<SNR>197_Lint[3]..ale#linter#Get[7]..ale#linter#GetAll
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/ale/autoload/ale/engine)
chdir(/Users/tran/Documents/book-tc)
line 5: sourcing "/Users/tran/.config/nvim/plugged/ale/autoload/ale/engine/ignore.vim"
finished sourcing /Users/tran/.config/nvim/plugged/ale/autoload/ale/engine/ignore.vim
continuing in function ale#events#SaveEvent[13]..ale#Queue[33]..<SNR>197_Lint[4]..ale#linter#RemoveIgnored
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/ale/autoload/ale)
chdir(/Users/tran/Documents/book-tc)
line 20: sourcing "/Users/tran/.config/nvim/plugged/ale/autoload/ale/engine.vim"
finished sourcing /Users/tran/.config/nvim/plugged/ale/autoload/ale/engine.vim
continuing in function ale#events#SaveEvent[13]..ale#Queue[33]..<SNR>197_Lint
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/ale/autoload/ale)
chdir(/Users/tran/Documents/book-tc)
line 5: sourcing "/Users/tran/.config/nvim/plugged/ale/autoload/ale/command.vim"
finished sourcing /Users/tran/.config/nvim/plugged/ale/autoload/ale/command.vim
continuing in function ale#events#SaveEvent[13]..ale#Queue[33]..<SNR>197_Lint[20]..ale#engine#RunLinters[4]..<SNR>214_GetLintFileValues
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/ale/autoload/ale)
chdir(/Users/tran/Documents/book-tc)
line 1: sourcing "/Users/tran/.config/nvim/plugged/ale/autoload/ale/node.vim"
finished sourcing /Users/tran/.config/nvim/plugged/ale/autoload/ale/node.vim
continuing in function ale#events#SaveEvent[13]..ale#Queue[33]..<SNR>197_Lint[20]..ale#engine#RunLinters[4]..<SNR>214_GetLintFileValues[27]..<lambda>6[1]..<SNR>214_RunLinters[12]..<SNR>214_RunLinter[4]..ale#linter#GetExecutable[3]..ale#handlers#alex#GetExecutable
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/ale/autoload/ale)
chdir(/Users/tran/Documents/book-tc)
line 2: sourcing "/Users/tran/.config/nvim/plugged/ale/autoload/ale/path.vim"
finished sourcing /Users/tran/.config/nvim/plugged/ale/autoload/ale/path.vim
continuing in function ale#events#SaveEvent[13]..ale#Queue[33]..<SNR>197_Lint[20]..ale#engine#RunLinters[4]..<SNR>214_GetLintFileValues[27]..<lambda>6[1]..<SNR>214_RunLinters[12]..<SNR>214_RunLinter[4]..ale#linter#GetExecutable[3]..ale#handlers#alex#GetExecutable[1]..ale#node#FindExecutable[5]..ale#node#FindNearestExecutable
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/ale/autoload/ale)
chdir(/Users/tran/Documents/book-tc)
line 23: sourcing "/Users/tran/.config/nvim/plugged/ale/autoload/ale/history.vim"
finished sourcing /Users/tran/.config/nvim/plugged/ale/autoload/ale/history.vim
continuing in function ale#events#SaveEvent[13]..ale#Queue[33]..<SNR>197_Lint[20]..ale#engine#RunLinters[4]..<SNR>214_GetLintFileValues[27]..<lambda>6[1]..<SNR>214_RunLinters[12]..<SNR>214_RunLinter[6]..<SNR>214_RunIfExecutable[14]..ale#engine#IsExecutable
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/ale/autoload/ale/handlers)
chdir(/Users/tran/Documents/book-tc)
line 3: sourcing "/Users/tran/.config/nvim/plugged/ale/autoload/ale/handlers/textlint.vim"
finished sourcing /Users/tran/.config/nvim/plugged/ale/autoload/ale/handlers/textlint.vim
continuing in function ale#events#SaveEvent[13]..ale#Queue[33]..<SNR>197_Lint[20]..ale#engine#RunLinters[4]..<SNR>214_GetLintFileValues[27]..<lambda>6[1]..<SNR>214_RunLinters[12]..<SNR>214_RunLinter[4]..ale#linter#GetExecutable
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/ale/autoload/ale)
chdir(/Users/tran/Documents/book-tc)
line 6: sourcing "/Users/tran/.config/nvim/plugged/ale/autoload/ale/sign.vim"
SignColumn     xxx ctermfg=235 ctermbg=235 guifg=#1b2b34 guibg=#1b2b34
finished sourcing /Users/tran/.config/nvim/plugged/ale/autoload/ale/sign.vim
continuing in function ale#events#SaveEvent[13]..ale#Queue[33]..<SNR>197_Lint[20]..ale#engine#RunLinters[4]..<SNR>214_GetLintFileValues[27]..<lambda>6[1]..<SNR>214_RunLinters[26]..ale#engine#SetResults
--- Signs ---

chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/ale/autoload/ale)
chdir(/Users/tran/Documents/book-tc)
line 10: sourcing "/Users/tran/.config/nvim/plugged/ale/autoload/ale/list.vim"
finished sourcing /Users/tran/.config/nvim/plugged/ale/autoload/ale/list.vim
continuing in function ale#events#SaveEvent[13]..ale#Queue[33]..<SNR>197_Lint[20]..ale#engine#RunLinters[4]..<SNR>214_GetLintFileValues[27]..<lambda>6[1]..<SNR>214_RunLinters[26]..ale#engine#SetResults
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/ale/autoload/ale)
chdir(/Users/tran/Documents/book-tc)
line 19: sourcing "/Users/tran/.config/nvim/plugged/ale/autoload/ale/highlight.vim"
finished sourcing /Users/tran/.config/nvim/plugged/ale/autoload/ale/highlight.vim
continuing in function ale#events#SaveEvent[13]..ale#Queue[33]..<SNR>197_Lint[20]..ale#engine#RunLinters[4]..<SNR>214_GetLintFileValues[27]..<lambda>6[1]..<SNR>214_RunLinters[26]..ale#engine#SetResults
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/ale/autoload/ale)
chdir(/Users/tran/Documents/book-tc)
line 26: sourcing "/Users/tran/.config/nvim/plugged/ale/autoload/ale/cursor.vim"
finished sourcing /Users/tran/.config/nvim/plugged/ale/autoload/ale/cursor.vim
continuing in function ale#events#SaveEvent[13]..ale#Queue[33]..<SNR>197_Lint[20]..ale#engine#RunLinters[4]..<SNR>214_GetLintFileValues[27]..<lambda>6[1]..<SNR>214_RunLinters[26]..ale#engine#SetResults
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'))

Executing BufWritePost Autocommands for "*"
autocommand call fugitive#ReloadStatus(-1, 0)

Executing BufWritePost Autocommands for "*"
autocommand call s:HandleBufWrite(fnamemodify(expand('<afile>'), ':p'))

Executing BufWritePost Autocommands for "<buffer=2>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing BufWritePost Autocommands for "<buffer=2>"
autocommand call s:write_triggered_update_tags(2)

chdir(/Users/tran/Documents/book-tc)
/Users/tran/Documents/book-tc
chdir(/Users/tran/Documents/book-tc)
/Users/tran/Documents/book-tc
Executing CursorHold Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665786 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 48 seconds).
Executing CursorHold Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

autocommand if exists('*ale#lsp#Send') | call ale#hover#ShowTruncatedMessageAtCursor() | endif

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'))

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

Executing CursorHold Autocommands for "*"
autocommand silent! checktime

Executing CursorHold Autocommands for "*"
autocommand call s:do_delayed_update()

Executing command: "'/usr/local/bin/zsh' '-c' ''/Users/tran/code/github/markdown2ctags/markdown2ctags.py'  -f - --sort=yes --sro=»  '/var/folders/jn/7jlp804x74j9y5zw57ch3v0m0000gn/T/nvimHTA9Wm/9.md''"


autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

Executing CursorHold Autocommands for "<buffer=2>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorHold Autocommands for "*"
autocommand call s:clear_message()


Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665786 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 47 seconds).
Executing CursorHold Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

autocommand if exists('*ale#lsp#Send') | call ale#hover#ShowTruncatedMessageAtCursor() | endif

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'))

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

Executing CursorHold Autocommands for "*"
autocommand silent! checktime

Executing CursorHold Autocommands for "*"
autocommand call s:do_delayed_update()

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

Executing CursorHold Autocommands for "<buffer=2>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()


chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki)
chdir(/Users/tran/Documents/book-tc)
sourcing "/Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/link.vim"
finished sourcing /Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/link.vim
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/link)
chdir(/Users/tran/Documents/book-tc)
line 1: sourcing "/Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/link/wiki.vim"
finished sourcing /Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/link/wiki.vim
continuing in function wiki#link#open[1]..wiki#link#get
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki)
chdir(/Users/tran/Documents/book-tc)
line 1: sourcing "/Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/rx.vim"
finished sourcing /Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/rx.vim
continuing in function wiki#link#open[1]..wiki#link#get[1]..wiki#link#wiki#matcher
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/link)
chdir(/Users/tran/Documents/book-tc)
line 1: sourcing "/Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/link/adoc.vim"
finished sourcing /Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/link/adoc.vim
continuing in function wiki#link#open[1]..wiki#link#get
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/link)
chdir(/Users/tran/Documents/book-tc)
line 1: sourcing "/Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/link/md_fig.vim"
finished sourcing /Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/link/md_fig.vim
continuing in function wiki#link#open[1]..wiki#link#get
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/link)
chdir(/Users/tran/Documents/book-tc)
line 1: sourcing "/Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/link/md.vim"
finished sourcing /Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/link/md.vim
continuing in function wiki#link#open[1]..wiki#link#get
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/link)
chdir(/Users/tran/Documents/book-tc)
line 1: sourcing "/Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/link/ref_target.vim"
finished sourcing /Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/link/ref_target.vim
continuing in function wiki#link#open[1]..wiki#link#get
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/link)
chdir(/Users/tran/Documents/book-tc)
line 1: sourcing "/Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/link/ref_single.vim"
finished sourcing /Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/link/ref_single.vim
continuing in function wiki#link#open[1]..wiki#link#get
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/link)
chdir(/Users/tran/Documents/book-tc)
line 1: sourcing "/Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/link/ref_double.vim"
finished sourcing /Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/link/ref_double.vim
continuing in function wiki#link#open[1]..wiki#link#get
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/link)
chdir(/Users/tran/Documents/book-tc)
line 1: sourcing "/Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/link/url.vim"
finished sourcing /Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/link/url.vim
continuing in function wiki#link#open[1]..wiki#link#get
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/link)
chdir(/Users/tran/Documents/book-tc)
line 1: sourcing "/Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/link/shortcite.vim"
finished sourcing /Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/link/shortcite.vim
continuing in function wiki#link#open[1]..wiki#link#get
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/link)
chdir(/Users/tran/Documents/book-tc)
line 1: sourcing "/Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/link/date.vim"
finished sourcing /Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/link/date.vim
continuing in function wiki#link#open[1]..wiki#link#get
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/link)
chdir(/Users/tran/Documents/book-tc)
line 1: sourcing "/Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/link/word.vim"
finished sourcing /Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/link/word.vim
continuing in function wiki#link#open[1]..wiki#link#get
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki)
chdir(/Users/tran/Documents/book-tc)
line 38: sourcing "/Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/url.vim"
finished sourcing /Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/url.vim
continuing in function wiki#link#open[1]..wiki#link#get[16]..<SNR>224_parse_link
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/url)
chdir(/Users/tran/Documents/book-tc)
line 31: sourcing "/Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/url/wiki.vim"
finished sourcing /Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/url/wiki.vim
continuing in function wiki#link#open[1]..wiki#link#get[16]..<SNR>224_parse_link[38]..wiki#url#parse
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc/notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc/notes)
chdir(/Users/tran/Documents/book-tc)
Executing BufAdd Autocommands for "*"
autocommand call <SID>UpdateList('BufAdd')

Executing BufLeave Autocommands for "*"
autocommand call <SID>UpdateLastColumn('BufLeave')

Executing BufLeave Autocommands for "*"
autocommand if &previewwindow |     if exists('b:quickr_preview_modifiable') |         let &modifiable = b:quickr_preview_modifiable |         unlet b:quickr_preview_modifiable |     endif | endif

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufWinLeave Autocommands for "*"
autocommand if s:can_diffoff(+expand('<abuf>')) && s:diff_window_count() == 2 |   call s:diffoff_all(s:Dir(+expand('<abuf>'))) | endif

Executing BufWinLeave Autocommands for "*"
autocommand execute getwinvar(+bufwinnr(+expand('<abuf>')), 'fugitive_leave')

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing BufHidden Autocommands for "*"
autocommand call ale#highlight#BufferHidden(expand('<abuf>'))

Reading ShaDa file "/Users/tran/.local/share/nvim/shada/main.shada" marks
Executing BufNewFile Autocommands for "*.{md,mdx,mdown,mkd,mkdn,markdown,mdwn}"
autocommand setfiletype markdown

Executing FileType Autocommands for "*"
autocommand call s:LoadFTPlugin()

chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-markdown/ftplugin)
chdir(/Users/tran/Documents/book-tc)
line 17: sourcing "/Users/tran/.config/nvim/plugged/vim-markdown/ftplugin/markdown.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-markdown/ftplugin/markdown.vim
continuing in function <SNR>13_LoadFTPlugin
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot/ftplugin)
chdir(/Users/tran/Documents/book-tc)
line 17: sourcing "/Users/tran/.config/nvim/plugged/vim-polyglot/ftplugin/markdown.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-polyglot/ftplugin/markdown.vim
continuing in function <SNR>13_LoadFTPlugin
chdir(/Users/tran/Documents/book-tc)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/ftplugin)
chdir(/Users/tran/Documents/book-tc)
line 17: sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/ftplugin/markdown.vim"
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot/ftplugin)
chdir(/Users/tran/Documents/book-tc)
line 10: sourcing "/Users/tran/.config/nvim/plugged/vim-polyglot/ftplugin/html.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-polyglot/ftplugin/html.vim
continuing in /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/ftplugin/markdown.vim
chdir(/Users/tran/Documents/book-tc)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/ftplugin)
chdir(/Users/tran/Documents/book-tc)
line 10: sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/ftplugin/html.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/ftplugin/html.vim
continuing in /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/ftplugin/markdown.vim
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot/after/ftplugin)
chdir(/Users/tran/Documents/book-tc)
line 10: sourcing "/Users/tran/.config/nvim/plugged/vim-polyglot/after/ftplugin/html.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-polyglot/after/ftplugin/html.vim
continuing in /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/ftplugin/markdown.vim
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/ftplugin/markdown.vim
continuing in function <SNR>13_LoadFTPlugin
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-markdown/after/ftplugin)
chdir(/Users/tran/Documents/book-tc)
line 17: sourcing "/Users/tran/.config/nvim/plugged/vim-markdown/after/ftplugin/markdown.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-markdown/after/ftplugin/markdown.vim
continuing in function <SNR>13_LoadFTPlugin
Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-markdown/indent)
chdir(/Users/tran/Documents/book-tc)
line 14: sourcing "/Users/tran/.config/nvim/plugged/vim-markdown/indent/markdown.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-markdown/indent/markdown.vim
continuing in function <SNR>14_LoadIndent
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot/indent)
chdir(/Users/tran/Documents/book-tc)
line 14: sourcing "/Users/tran/.config/nvim/plugged/vim-polyglot/indent/markdown.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-polyglot/indent/markdown.vim
continuing in function <SNR>14_LoadIndent
Executing FileType Autocommands for "*"
autocommand exe "set syntax=" . expand("<amatch>")

Executing Syntax Autocommands for "*"
autocommand call s:SynSet()

chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-markdown/syntax)
chdir(/Users/tran/Documents/book-tc)
line 24: sourcing "/Users/tran/.config/nvim/plugged/vim-markdown/syntax/markdown.vim"
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot/syntax)
chdir(/Users/tran/Documents/book-tc)
line 13: sourcing "/Users/tran/.config/nvim/plugged/vim-polyglot/syntax/html.vim"
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot/syntax)
chdir(/Users/tran/Documents/book-tc)
line 226: sourcing "/Users/tran/.config/nvim/plugged/vim-polyglot/syntax/javascript.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-polyglot/syntax/javascript.vim
continuing in /Users/tran/.config/nvim/plugged/vim-polyglot/syntax/html.vim
chdir(/Users/tran/Documents/book-tc)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax)
chdir(/Users/tran/Documents/book-tc)
line 226: sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/javascript.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/javascript.vim
continuing in /Users/tran/.config/nvim/plugged/vim-polyglot/syntax/html.vim
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot/after/syntax)
chdir(/Users/tran/Documents/book-tc)
line 226: sourcing "/Users/tran/.config/nvim/plugged/vim-polyglot/after/syntax/javascript.vim"
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot/after/syntax)
chdir(/Users/tran/Documents/book-tc)
line 9: sourcing "/Users/tran/.config/nvim/plugged/vim-polyglot/after/syntax/jsx.vim"
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot/after/syntax)
chdir(/Users/tran/Documents/book-tc)
line 54: sourcing "/Users/tran/.config/nvim/plugged/vim-polyglot/after/syntax/jsx_pretty.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-polyglot/after/syntax/jsx_pretty.vim
continuing in /Users/tran/.config/nvim/plugged/vim-polyglot/after/syntax/jsx.vim
finished sourcing /Users/tran/.config/nvim/plugged/vim-polyglot/after/syntax/jsx.vim
continuing in /Users/tran/.config/nvim/plugged/vim-polyglot/after/syntax/javascript.vim
finished sourcing /Users/tran/.config/nvim/plugged/vim-polyglot/after/syntax/javascript.vim
continuing in /Users/tran/.config/nvim/plugged/vim-polyglot/syntax/html.vim
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot/syntax)
chdir(/Users/tran/Documents/book-tc)
line 251: sourcing "/Users/tran/.config/nvim/plugged/vim-polyglot/syntax/vb.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-polyglot/syntax/vb.vim
continuing in /Users/tran/.config/nvim/plugged/vim-polyglot/syntax/html.vim
chdir(/Users/tran/Documents/book-tc)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax)
chdir(/Users/tran/Documents/book-tc)
line 251: sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/vb.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/vb.vim
continuing in /Users/tran/.config/nvim/plugged/vim-polyglot/syntax/html.vim
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot/syntax)
chdir(/Users/tran/Documents/book-tc)
line 261: sourcing "/Users/tran/.config/nvim/plugged/vim-polyglot/syntax/css.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-polyglot/syntax/css.vim
continuing in /Users/tran/.config/nvim/plugged/vim-polyglot/syntax/html.vim
chdir(/Users/tran/Documents/book-tc)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax)
chdir(/Users/tran/Documents/book-tc)
line 261: sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/css.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/css.vim
continuing in /Users/tran/.config/nvim/plugged/vim-polyglot/syntax/html.vim
finished sourcing /Users/tran/.config/nvim/plugged/vim-polyglot/syntax/html.vim
continuing in /Users/tran/.config/nvim/plugged/vim-markdown/syntax/markdown.vim
chdir(/Users/tran/Documents/book-tc)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax)
chdir(/Users/tran/Documents/book-tc)
line 13: sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/html.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/html.vim
continuing in /Users/tran/.config/nvim/plugged/vim-markdown/syntax/markdown.vim
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot/after/syntax)
chdir(/Users/tran/Documents/book-tc)
line 13: sourcing "/Users/tran/.config/nvim/plugged/vim-polyglot/after/syntax/html.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-polyglot/after/syntax/html.vim
continuing in /Users/tran/.config/nvim/plugged/vim-markdown/syntax/markdown.vim
finished sourcing /Users/tran/.config/nvim/plugged/vim-markdown/syntax/markdown.vim
continuing in function <SNR>16_SynSet
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot/syntax)
chdir(/Users/tran/Documents/book-tc)
line 24: sourcing "/Users/tran/.config/nvim/plugged/vim-polyglot/syntax/markdown.vim"
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot/syntax)
chdir(/Users/tran/Documents/book-tc)
line 17: sourcing "/Users/tran/.config/nvim/plugged/vim-polyglot/syntax/html.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-polyglot/syntax/html.vim
continuing in /Users/tran/.config/nvim/plugged/vim-polyglot/syntax/markdown.vim
chdir(/Users/tran/Documents/book-tc)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax)
chdir(/Users/tran/Documents/book-tc)
line 17: sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/html.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/html.vim
continuing in /Users/tran/.config/nvim/plugged/vim-polyglot/syntax/markdown.vim
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-polyglot/after/syntax)
chdir(/Users/tran/Documents/book-tc)
line 17: sourcing "/Users/tran/.config/nvim/plugged/vim-polyglot/after/syntax/html.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-polyglot/after/syntax/html.vim
continuing in /Users/tran/.config/nvim/plugged/vim-polyglot/syntax/markdown.vim
finished sourcing /Users/tran/.config/nvim/plugged/vim-polyglot/syntax/markdown.vim
continuing in function <SNR>16_SynSet
chdir(/Users/tran/Documents/book-tc)
chdir(/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax)
chdir(/Users/tran/Documents/book-tc)
line 24: sourcing "/usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/markdown.vim"
finished sourcing /usr/local/Cellar/neovim/HEAD-0af18a6/share/nvim/runtime/syntax/markdown.vim
continuing in function <SNR>16_SynSet
Executing Syntax Autocommands for "*"
autocommand call s:InitColor()

Executing FileType Autocommands for "*"
autocommand call <SID>setup()

Executing FileType Autocommands for "*"
autocommand call ale#events#FileTypeEvent(   str2nr(expand('<abuf>')),   expand('<amatch>'))

Executing FileType Autocommands for "*"
autocommand call s:Autocmd('FileType', expand('<amatch>'), +expand('<abuf>'))

Executing FileType Autocommands for "*"
autocommand call <SID>SetupAutoCommands()

Executing FileType Autocommands for "*"
autocommand call s:Disable()

Executing FileType Autocommands for "*"
autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing BufNewFile Autocommands for "*.md"
autocommand setf markdown

Executing BufNewFile Autocommands for "*"
autocommand if (&ft == "" || &ft == "conf") && expand("<afile>:e") == "" | call polyglot#shebang#Detect() | endif

Executing BufNewFile Autocommands for "*"
autocommand if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat | runtime! scripts.vim | endif

Executing BufNewFile Autocommands for "*.md"
autocommand setf markdown

Executing BufNewFile Autocommands for "*"
autocommand if !exists('b:delimitMate_was_here') |   call <SID>setup() |   let b:delimitMate_was_here = 1 | endif

Executing BufNewFile Autocommands for "*"
autocommand call gutentags#setup_gutentags()

Executing BufNewFile Autocommands for "*"
autocommand call s:Autocmd('BufCreate', +expand('<abuf>'))

Executing BufNewFile Autocommands for "*.md"
autocommand call s:autoload()

Executing BufNewFile Autocommands for "*"
autocommand call s:UseConfigFiles()

Executing BufNewFile Autocommands for "*"
autocommand call FugitiveDetect(expand('<amatch>:p'))

Executing User Autocommands for "Fugitive"
autocommand if expand('%:p') =~# '\.git[\/].*MSG$' &&   exists('+omnifunc') &&   &omnifunc =~# '^\%(syntaxcomplete#Complete\)\=$' &&   !empty(gitlab#homepage_for_remote(FugitiveRemoteUrl())) |   setlocal omnifunc=gitlab#omnifunc | endif

Executing User Autocommands for "Fugitive"
autocommand if expand('%:p') =~# '\.git[\/].*MSG$' &&   exists('+omnifunc') &&   &omnifunc =~# '^\%(syntaxcomplete#Complete\)\=$' &&   !empty(filter(s:Config(),     '!empty(rhubarb#HomepageForUrl(matchstr(v:val, ''^\s*url\s*=\s*"\=\zs\S*'')))')) |   setlocal omnifunc=rhubarb#Complete | endif

Executing BufNewFile Autocommands for "*"
autocommand call s:InitColor()

Executing BufEnter Autocommands for "*"
autocommand call s:detect_indent()

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing command: "unset nonomatch; print -N >/var/folders/jn/7jlp804x74j9y5zw57ch3v0m0000gn/T/nvimHTA9Wm/10 /Users/tran/Documents/book-tc/notes/{*.md,*.markdown,*.mdown,*.mdwn,*.mkd,*.mkdn,*.mkdown,*.ronn,*.scd,*.workbook,contents.lr,.git,.svn,.hg}"

Executing BufEnter Autocommands for "*"
autocommand :syntax sync fromstart

Executing BufEnter Autocommands for "*"
autocommand call <SID>UpdateList('BufEnter')

Executing BufEnter Autocommands for "*"
autocommand if !exists('b:delimitMate_was_here') |   call <SID>setup() |   let b:delimitMate_was_here = 1 | endif

Executing BufEnter Autocommands for "*"
autocommand call lightline#update()

Executing BufEnter Autocommands for "*"
autocommand if &previewwindow |     if !exists('b:quickr_preview_modifiable') |         let b:quickr_preview_modifiable = &modifiable |         let &modifiable = 0 |    endif | endif

Executing BufEnter Autocommands for "*"
autocommand call ale#events#ReadOrEnterEvent(str2nr(expand('<abuf>')))

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand let s:buf_path = expand("%") | if isdirectory(s:buf_path) | bdelete! | call timer_start(100, {->OpenLfIn(s:buf_path, s:default_edit_cmd)}) | endif

Executing BufEnter Autocommands for "*"
autocommand if expand('%') ==# '' && &previewwindow && pumvisible() && getbufvar('#', '&omnifunc') ==# 'gitlab#omnifunc' |    setlocal nolist linebreak filetype=markdown | endif

Executing BufEnter Autocommands for "*"
autocommand if expand('%') ==# '' && &previewwindow && pumvisible() && getbufvar('#', '&omnifunc') ==# 'rhubarb#omnifunc' |    setlocal nolist linebreak filetype=markdown | endif

Executing BufEnter Autocommands for "*"
autocommand call s:on_bufenter()

Executing BufEnter Autocommands for "*"
autocommand if expand('<amatch>') !~ '__Tagbar__.*' |     let s:last_alt_bufnr = bufnr('#') | endif

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing BufEnter Autocommands for "*"
autocommand call ale#highlight#UpdateHighlights()

Executing BufWinEnter Autocommands for "*"
autocommand if &ft == "" && expand("<afile>:e") == "" | call s:Observe('shebang#Detect') | endif

Executing BufWinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing BufWinEnter Autocommands for "*"
autocommand call s:Autocmd('BufWinEnter', +expand('<abuf>'), win_getid())

Executing BufWinEnter Autocommands for "*"
autocommand call <SID>SetupAutoCommands()

Executing BufWinEnter Autocommands for "*"
autocommand call s:IndentLinesDisable() | call s:LeadingSpaceDisable() | call s:Setup()

Executing BufWinEnter Autocommands for "*"
autocommand if s:can_diffoff(+expand('<abuf>')) && s:diff_window_count() == 1 |   call s:diffoff() | endif

Executing BufWinEnter Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(1)

autocommand call s:MarkdownSetupFolding()

chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki)
chdir(/Users/tran/Documents/book-tc)
line 23: sourcing "/Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/nav.vim"
finished sourcing /Users/tran/.config/nvim/plugged/wiki.vim/autoload/wiki/nav.vim
continuing in function wiki#link#open[6]..32
Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665786 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 47 seconds).
Executing CursorHold Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

autocommand if exists('*ale#lsp#Send') | call ale#hover#ShowTruncatedMessageAtCursor() | endif

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'))

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

Executing CursorHold Autocommands for "*"
autocommand silent! checktime

Executing CursorHold Autocommands for "*"
autocommand call s:do_delayed_update()

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHold Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorHoldI Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665786 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 45 seconds).
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

Executing CursorHoldI Autocommands for "*"
autocommand call s:do_delayed_update()

Executing CursorHoldI Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorHoldI Autocommands for "*"
autocommand call s:clear_message()

-- INSERT --
Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHoldI Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665786 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 44 seconds).
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

Executing CursorHoldI Autocommands for "*"
autocommand call s:do_delayed_update()

Executing CursorHoldI Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHoldI Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665786 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 43 seconds).
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

Executing CursorHoldI Autocommands for "*"
autocommand call s:do_delayed_update()

Executing CursorHoldI Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorHoldI Autocommands for "*"
autocommand call s:clear_message()

-- INSERT --
Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHoldI Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665786 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 42 seconds).
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

Executing CursorHoldI Autocommands for "*"
autocommand call s:do_delayed_update()

Executing CursorHoldI Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHoldI Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665786 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 42 seconds).
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

Executing CursorHoldI Autocommands for "*"
autocommand call s:do_delayed_update()

Executing CursorHoldI Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorHoldI Autocommands for "*"
autocommand call s:clear_message()

-- INSERT --
Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()
-- INSERT --
Executing CompleteChanged Autocommands for "*"
autocommand call s:Autocmd('MenuPopupChanged', get(v:, 'event', {}), win_screenpos(winnr())[0] + winline() - 2)

Executing TextChangedP Autocommands for "*"
autocommand call s:Autocmd('TextChangedP', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedP Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CompleteChanged Autocommands for "*"
autocommand call s:Autocmd('MenuPopupChanged', get(v:, 'event', {}), win_screenpos(winnr())[0] + winline() - 2)

Executing TextChangedP Autocommands for "*"
autocommand call s:Autocmd('TextChangedP', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedP Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CompleteDone Autocommands for "*"
autocommand call s:Autocmd('CompleteDone', get(v:, 'completed_item', {}))
-- INSERT --
Executing CompleteChanged Autocommands for "*"
autocommand call s:Autocmd('MenuPopupChanged', get(v:, 'event', {}), win_screenpos(winnr())[0] + winline() - 2)
-- INSERT ---- INSERT --
Executing CompleteDone Autocommands for "*"
autocommand call s:Autocmd('CompleteDone', get(v:, 'completed_item', {}))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()
-- INSERT --
Executing CompleteChanged Autocommands for "*"
autocommand call s:Autocmd('MenuPopupChanged', get(v:, 'event', {}), win_screenpos(winnr())[0] + winline() - 2)

Executing TextChangedP Autocommands for "*"
autocommand call s:Autocmd('TextChangedP', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedP Autocommands for "*"
autocommand call UltiSnips#TrackChange()
-- INSERT ---- INSERT --
Executing CompleteDone Autocommands for "*"
autocommand call s:Autocmd('CompleteDone', get(v:, 'completed_item', {}))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()
-- INSERT --
Executing CompleteChanged Autocommands for "*"
autocommand call s:Autocmd('MenuPopupChanged', get(v:, 'event', {}), win_screenpos(winnr())[0] + winline() - 2)

Executing TextChangedP Autocommands for "*"
autocommand call s:Autocmd('TextChangedP', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedP Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CompleteChanged Autocommands for "*"
autocommand call s:Autocmd('MenuPopupChanged', get(v:, 'event', {}), win_screenpos(winnr())[0] + winline() - 2)

Executing TextChangedP Autocommands for "*"
autocommand call s:Autocmd('TextChangedP', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedP Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CompleteDone Autocommands for "*"
autocommand call s:Autocmd('CompleteDone', get(v:, 'completed_item', {}))
-- INSERT ---- INSERT --
Executing CompleteDone Autocommands for "*"
autocommand call s:Autocmd('CompleteDone', get(v:, 'completed_item', {}))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHoldI Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665786 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 39 seconds).
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

Executing CursorHoldI Autocommands for "*"
autocommand call s:do_delayed_update()

Executing CursorHoldI Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHoldI Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665786 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 37 seconds).
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

Executing CursorHoldI Autocommands for "*"
autocommand call s:do_delayed_update()

Executing CursorHoldI Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorHoldI Autocommands for "*"
autocommand call s:clear_message()

-- INSERT --
Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()
-- INSERT --
Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()
-- INSERT ---- INSERT --
Executing CompleteDone Autocommands for "*"
autocommand call s:Autocmd('CompleteDone', get(v:, 'completed_item', {}))

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()


Executing InsertLeave Autocommands for "*"
autocommand if &l:diff | diffupdate | endif

Executing InsertLeave Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarning() | endif

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing InsertLeave Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665786 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 34 seconds).
Executing CursorHold Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

autocommand if exists('*ale#lsp#Send') | call ale#hover#ShowTruncatedMessageAtCursor() | endif

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'))

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

Executing CursorHold Autocommands for "*"
autocommand silent! checktime

Executing CursorHold Autocommands for "*"
autocommand call s:do_delayed_update()

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHold Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665786 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 34 seconds).
Executing CursorHold Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

autocommand if exists('*ale#lsp#Send') | call ale#hover#ShowTruncatedMessageAtCursor() | endif

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'))

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

Executing CursorHold Autocommands for "*"
autocommand silent! checktime

Executing CursorHold Autocommands for "*"
autocommand call s:do_delayed_update()

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHold Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorHold Autocommands for "*"
autocommand call s:clear_message()


Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665786 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 33 seconds).
Executing CursorHold Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

autocommand if exists('*ale#lsp#Send') | call ale#hover#ShowTruncatedMessageAtCursor() | endif

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'))

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

Executing CursorHold Autocommands for "*"
autocommand silent! checktime

Executing CursorHold Autocommands for "*"
autocommand call s:do_delayed_update()

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHold Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHoldI Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665786 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 32 seconds).
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

Executing CursorHoldI Autocommands for "*"
autocommand call s:do_delayed_update()

Executing CursorHoldI Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorHoldI Autocommands for "*"
autocommand call s:clear_message()

-- INSERT --
Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHoldI Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665786 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 29 seconds).
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

Executing CursorHoldI Autocommands for "*"
autocommand call s:do_delayed_update()

Executing CursorHoldI Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CompleteDone Autocommands for "*"
autocommand call s:Autocmd('CompleteDone', get(v:, 'completed_item', {}))

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHoldI Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665786 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 27 seconds).
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

Executing CursorHoldI Autocommands for "*"
autocommand call s:do_delayed_update()

Executing CursorHoldI Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorHoldI Autocommands for "*"
autocommand call s:clear_message()

-- INSERT --
Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHoldI Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665786 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 27 seconds).
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

Executing CursorHoldI Autocommands for "*"
autocommand call s:do_delayed_update()

Executing CursorHoldI Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHoldI Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665786 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 25 seconds).
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

Executing CursorHoldI Autocommands for "*"
autocommand call s:do_delayed_update()

Executing CursorHoldI Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorHoldI Autocommands for "*"
autocommand call s:clear_message()

-- INSERT --
Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()


Executing InsertLeave Autocommands for "*"
autocommand if &l:diff | diffupdate | endif

Executing InsertLeave Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarning() | endif

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing InsertLeave Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665786 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 24 seconds).
Executing CursorHold Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

autocommand if exists('*ale#lsp#Send') | call ale#hover#ShowTruncatedMessageAtCursor() | endif

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'))

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

Executing CursorHold Autocommands for "*"
autocommand silent! checktime

Executing CursorHold Autocommands for "*"
autocommand call s:do_delayed_update()

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHold Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHoldI Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665786 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 22 seconds).
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

Executing CursorHoldI Autocommands for "*"
autocommand call s:do_delayed_update()

Executing CursorHoldI Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorHoldI Autocommands for "*"
autocommand call s:clear_message()

-- INSERT --

Executing InsertLeave Autocommands for "*"
autocommand if &l:diff | diffupdate | endif

Executing InsertLeave Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarning() | endif

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing InsertLeave Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665786 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 21 seconds).
Executing CursorHold Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

autocommand if exists('*ale#lsp#Send') | call ale#hover#ShowTruncatedMessageAtCursor() | endif

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'))

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

Executing CursorHold Autocommands for "*"
autocommand silent! checktime

Executing CursorHold Autocommands for "*"
autocommand call s:do_delayed_update()

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHold Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'))

"~/Documents/book-tc/notes/appraisals.md" 
"~/Documents/book-tc/notes/appraisals.md" [New] 3L, 75C written
Executing BufWritePost Autocommands for "*"
autocommand if (&ft == "" || &ft == "conf") && expand("<afile>:e") == "" | call polyglot#shebang#Detect() | endif

autocommand au! polyglot-observer

Executing BufWritePost Autocommands for "*"
autocommand if &l:foldmethod ==# 'manual' && exists('b:foldmethod_save')|   let &l:foldmethod = b:foldmethod_save|   execute 'normal! zx'| endif

Executing BufWritePost Autocommands for "*"
autocommand call ale#events#SaveEvent(str2nr(expand('<abuf>')))

--- Signs ---

Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'))

Executing BufWritePost Autocommands for "*"
autocommand call fugitive#ReloadStatus(-1, 0)

Executing BufWritePost Autocommands for "*"
autocommand call s:HandleBufWrite(fnamemodify(expand('<afile>'), ':p'))

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing BufWritePost Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing BufWritePost Autocommands for "<buffer=31>"
autocommand call s:write_triggered_update_tags(31)

chdir(/Users/tran/Documents/book-tc)
/Users/tran/Documents/book-tc
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
/Users/tran/Documents/book-tc
Executing CursorHold Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665786 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 18 seconds).
Executing CursorHold Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

autocommand if exists('*ale#lsp#Send') | call ale#hover#ShowTruncatedMessageAtCursor() | endif

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'))

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHold Autocommands for "*"
autocommand silent! checktime

Executing CursorHold Autocommands for "*"
autocommand call s:do_delayed_update()

Executing command: "'/usr/local/bin/zsh' '-c' ''/Users/tran/code/github/markdown2ctags/markdown2ctags.py'  -f - --sort=yes --sro=»  '/var/folders/jn/7jlp804x74j9y5zw57ch3v0m0000gn/T/nvimHTA9Wm/11.md''"


autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHold Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorHold Autocommands for "*"
autocommand call s:clear_message()


Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665786 ..
vim-misc 1.17.6: Running handler xolox#session#auto_save_periodic ..
Executing CursorHold Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

autocommand if exists('*ale#lsp#Send') | call ale#hover#ShowTruncatedMessageAtCursor() | endif

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'))

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHold Autocommands for "*"
autocommand silent! checktime

Executing CursorHold Autocommands for "*"
autocommand call s:do_delayed_update()

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHold Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing command: "'/usr/bin/pbcopy'"


Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHoldI Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665854 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 60 seconds).
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHoldI Autocommands for "*"
autocommand call s:do_delayed_update()

Executing CursorHoldI Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorHoldI Autocommands for "*"
autocommand call s:clear_message()

-- INSERT --
Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHoldI Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665854 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 58 seconds).
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHoldI Autocommands for "*"
autocommand call s:do_delayed_update()

Executing CursorHoldI Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHoldI Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665854 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 57 seconds).
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHoldI Autocommands for "*"
autocommand call s:do_delayed_update()

Executing CursorHoldI Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorHoldI Autocommands for "*"
autocommand call s:clear_message()

-- INSERT --
Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)-- INSERT --
Executing CompleteChanged Autocommands for "*"
autocommand call s:Autocmd('MenuPopupChanged', get(v:, 'event', {}), win_screenpos(winnr())[0] + winline() - 2)

Executing TextChangedP Autocommands for "*"
autocommand call s:Autocmd('TextChangedP', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedP Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CompleteChanged Autocommands for "*"
autocommand call s:Autocmd('MenuPopupChanged', get(v:, 'event', {}), win_screenpos(winnr())[0] + winline() - 2)

Executing TextChangedP Autocommands for "*"
autocommand call s:Autocmd('TextChangedP', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedP Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CompleteDone Autocommands for "*"
autocommand call s:Autocmd('CompleteDone', get(v:, 'completed_item', {}))
-- INSERT ---- INSERT --
Executing CompleteDone Autocommands for "*"
autocommand call s:Autocmd('CompleteDone', get(v:, 'completed_item', {}))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHoldI Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665854 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 56 seconds).
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHoldI Autocommands for "*"
autocommand call s:do_delayed_update()

Executing CursorHoldI Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHoldI Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665854 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 55 seconds).
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHoldI Autocommands for "*"
autocommand call s:do_delayed_update()

Executing CursorHoldI Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorHoldI Autocommands for "*"
autocommand call s:clear_message()

-- INSERT --

Executing InsertLeave Autocommands for "*"
autocommand if &l:diff | diffupdate | endif

Executing InsertLeave Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarning() | endif

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing InsertLeave Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

1 change; before #8  6 seconds ago
Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

1 change; before #8  6 seconds ago
Executing CursorHold Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665854 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 54 seconds).
Executing CursorHold Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

autocommand if exists('*ale#lsp#Send') | call ale#hover#ShowTruncatedMessageAtCursor() | endif

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'))

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHold Autocommands for "*"
autocommand silent! checktime

Executing CursorHold Autocommands for "*"
autocommand call s:do_delayed_update()

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHold Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665854 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 53 seconds).
Executing CursorHold Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

autocommand if exists('*ale#lsp#Send') | call ale#hover#ShowTruncatedMessageAtCursor() | endif

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'))

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHold Autocommands for "*"
autocommand silent! checktime

Executing CursorHold Autocommands for "*"
autocommand call s:do_delayed_update()

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHold Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorHold Autocommands for "*"
autocommand call s:clear_message()


Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665854 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 52 seconds).
Executing CursorHold Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

autocommand if exists('*ale#lsp#Send') | call ale#hover#ShowTruncatedMessageAtCursor() | endif

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'))

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHold Autocommands for "*"
autocommand silent! checktime

Executing CursorHold Autocommands for "*"
autocommand call s:do_delayed_update()

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHold Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665854 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 50 seconds).
Executing CursorHold Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

autocommand if exists('*ale#lsp#Send') | call ale#hover#ShowTruncatedMessageAtCursor() | endif

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'))

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHold Autocommands for "*"
autocommand silent! checktime

Executing CursorHold Autocommands for "*"
autocommand call s:do_delayed_update()

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHold Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorHold Autocommands for "*"
autocommand call s:clear_message()


Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665854 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 49 seconds).
Executing CursorHold Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

autocommand if exists('*ale#lsp#Send') | call ale#hover#ShowTruncatedMessageAtCursor() | endif

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'))

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHold Autocommands for "*"
autocommand silent! checktime

Executing CursorHold Autocommands for "*"
autocommand call s:do_delayed_update()

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHold Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665854 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 48 seconds).
Executing CursorHold Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

autocommand if exists('*ale#lsp#Send') | call ale#hover#ShowTruncatedMessageAtCursor() | endif

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'))

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHold Autocommands for "*"
autocommand silent! checktime

Executing CursorHold Autocommands for "*"
autocommand call s:do_delayed_update()

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHold Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorHold Autocommands for "*"
autocommand call s:clear_message()


Executing command: "'/usr/bin/pbcopy'"


Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()
-- INSERT --
Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHoldI Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665854 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 48 seconds).
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHoldI Autocommands for "*"
autocommand call s:do_delayed_update()

Executing CursorHoldI Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHoldI Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665854 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 46 seconds).
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHoldI Autocommands for "*"
autocommand call s:do_delayed_update()

Executing CursorHoldI Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorHoldI Autocommands for "*"
autocommand call s:clear_message()

-- INSERT --
Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHoldI Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665854 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 45 seconds).
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHoldI Autocommands for "*"
autocommand call s:do_delayed_update()

Executing CursorHoldI Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CompleteChanged Autocommands for "*"
autocommand call s:Autocmd('MenuPopupChanged', get(v:, 'event', {}), win_screenpos(winnr())[0] + winline() - 2)

Executing TextChangedP Autocommands for "*"
autocommand call s:Autocmd('TextChangedP', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedP Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CompleteDone Autocommands for "*"
autocommand call s:Autocmd('CompleteDone', get(v:, 'completed_item', {}))

Executing InsertLeave Autocommands for "*"
autocommand if &l:diff | diffupdate | endif

Executing InsertLeave Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarning() | endif

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing InsertLeave Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

1 change; before #9  4 seconds ago
Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

1 change; before #9  4 seconds ago
Executing CursorHold Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665854 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 44 seconds).
Executing CursorHold Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

autocommand if exists('*ale#lsp#Send') | call ale#hover#ShowTruncatedMessageAtCursor() | endif

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'))

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHold Autocommands for "*"
autocommand silent! checktime

Executing CursorHold Autocommands for "*"
autocommand call s:do_delayed_update()

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHold Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorHold Autocommands for "*"
autocommand call s:clear_message()


Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665854 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 42 seconds).
Executing CursorHold Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

autocommand if exists('*ale#lsp#Send') | call ale#hover#ShowTruncatedMessageAtCursor() | endif

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'))

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHold Autocommands for "*"
autocommand silent! checktime

Executing CursorHold Autocommands for "*"
autocommand call s:do_delayed_update()

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHold Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665854 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 42 seconds).
Executing CursorHold Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

autocommand if exists('*ale#lsp#Send') | call ale#hover#ShowTruncatedMessageAtCursor() | endif

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'))

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHold Autocommands for "*"
autocommand silent! checktime

Executing CursorHold Autocommands for "*"
autocommand call s:do_delayed_update()

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHold Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorHold Autocommands for "*"
autocommand call s:clear_message()


Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665854 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 41 seconds).
Executing CursorHold Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

autocommand if exists('*ale#lsp#Send') | call ale#hover#ShowTruncatedMessageAtCursor() | endif

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'))

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHold Autocommands for "*"
autocommand silent! checktime

Executing CursorHold Autocommands for "*"
autocommand call s:do_delayed_update()

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHold Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHoldI Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665854 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 40 seconds).
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHoldI Autocommands for "*"
autocommand call s:do_delayed_update()

Executing CursorHoldI Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorHoldI Autocommands for "*"
autocommand call s:clear_message()

-- INSERT --

Executing InsertLeave Autocommands for "*"
autocommand if &l:diff | diffupdate | endif

Executing InsertLeave Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarning() | endif

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing InsertLeave Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()
-- INSERT --
Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHoldI Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665854 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 39 seconds).
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHoldI Autocommands for "*"
autocommand call s:do_delayed_update()

Executing CursorHoldI Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing InsertLeave Autocommands for "*"
autocommand if &l:diff | diffupdate | endif

Executing InsertLeave Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarning() | endif

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing InsertLeave Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHoldI Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665854 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 37 seconds).
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHoldI Autocommands for "*"
autocommand call s:do_delayed_update()

Executing CursorHoldI Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorHoldI Autocommands for "*"
autocommand call s:clear_message()

-- INSERT --
Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)-- INSERT --
Executing CompleteChanged Autocommands for "*"
autocommand call s:Autocmd('MenuPopupChanged', get(v:, 'event', {}), win_screenpos(winnr())[0] + winline() - 2)

Executing TextChangedP Autocommands for "*"
autocommand call s:Autocmd('TextChangedP', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedP Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CompleteChanged Autocommands for "*"
autocommand call s:Autocmd('MenuPopupChanged', get(v:, 'event', {}), win_screenpos(winnr())[0] + winline() - 2)

Executing TextChangedP Autocommands for "*"
autocommand call s:Autocmd('TextChangedP', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedP Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CompleteDone Autocommands for "*"
autocommand call s:Autocmd('CompleteDone', get(v:, 'completed_item', {}))
-- INSERT ---- INSERT --
Executing CompleteDone Autocommands for "*"
autocommand call s:Autocmd('CompleteDone', get(v:, 'completed_item', {}))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHoldI Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665854 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 33 seconds).
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHoldI Autocommands for "*"
autocommand call s:do_delayed_update()

Executing CursorHoldI Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CompleteDone Autocommands for "*"
autocommand call s:Autocmd('CompleteDone', get(v:, 'completed_item', {}))

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHoldI Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665854 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 32 seconds).
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHoldI Autocommands for "*"
autocommand call s:do_delayed_update()

Executing CursorHoldI Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorHoldI Autocommands for "*"
autocommand call s:clear_message()

-- INSERT --
Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)-- INSERT --
Executing CompleteChanged Autocommands for "*"
autocommand call s:Autocmd('MenuPopupChanged', get(v:, 'event', {}), win_screenpos(winnr())[0] + winline() - 2)

Executing TextChangedP Autocommands for "*"
autocommand call s:Autocmd('TextChangedP', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedP Autocommands for "*"
autocommand call UltiSnips#TrackChange()
-- INSERT ---- INSERT --
Executing CompleteDone Autocommands for "*"
autocommand call s:Autocmd('CompleteDone', get(v:, 'completed_item', {}))

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHoldI Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665854 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 31 seconds).
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHoldI Autocommands for "*"
autocommand call s:do_delayed_update()

Executing CursorHoldI Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CompleteChanged Autocommands for "*"
autocommand call s:Autocmd('MenuPopupChanged', get(v:, 'event', {}), win_screenpos(winnr())[0] + winline() - 2)

Executing TextChangedP Autocommands for "*"
autocommand call s:Autocmd('TextChangedP', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedP Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CompleteChanged Autocommands for "*"
autocommand call s:Autocmd('MenuPopupChanged', get(v:, 'event', {}), win_screenpos(winnr())[0] + winline() - 2)

Executing TextChangedP Autocommands for "*"
autocommand call s:Autocmd('TextChangedP', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedP Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CompleteDone Autocommands for "*"
autocommand call s:Autocmd('CompleteDone', get(v:, 'completed_item', {}))

Executing CompleteDone Autocommands for "*"
autocommand call s:Autocmd('CompleteDone', get(v:, 'completed_item', {}))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:Autocmd('InsertCharPre', v:char)

Executing InsertCharPre Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand if &l:foldenable && &l:foldmethod !=# 'manual'|   let b:foldmethod_save = &l:foldmethod|   let &l:foldmethod = 'manual'| endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), {'lnum': line('.'), 'col': col('.'), 'pre': strpart(getline('.'), 0, col('.') - 1), 'changedtick': b:changedtick})

Executing TextChangedI Autocommands for "*"
autocommand call UltiSnips#TrackChange()

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing InsertLeave Autocommands for "*"
autocommand if &l:diff | diffupdate | endif

Executing InsertLeave Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarning() | endif

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing InsertLeave Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call coc#float#nvim_refresh_scrollbar(win_getid())

autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665854 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 30 seconds).
Executing CursorHold Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

autocommand if exists('*ale#lsp#Send') | call ale#hover#ShowTruncatedMessageAtCursor() | endif

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'))

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHold Autocommands for "*"
autocommand silent! checktime

Executing CursorHold Autocommands for "*"
autocommand call s:do_delayed_update()

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHold Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorHold Autocommands for "*"
autocommand call s:clear_message()



chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'))

"notes/appraisals.md" 
"notes/appraisals.md" 6L, 107C written
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing BufWritePost Autocommands for "*"
autocommand if (&ft == "" || &ft == "conf") && expand("<afile>:e") == "" | call polyglot#shebang#Detect() | endif

autocommand au! polyglot-observer

Executing BufWritePost Autocommands for "*"
autocommand if &l:foldmethod ==# 'manual' && exists('b:foldmethod_save')|   let &l:foldmethod = b:foldmethod_save|   execute 'normal! zx'| endif

Executing BufWritePost Autocommands for "*"
autocommand call ale#events#SaveEvent(str2nr(expand('<abuf>')))

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
--- Signs ---

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'))

Executing BufWritePost Autocommands for "*"
autocommand call fugitive#ReloadStatus(-1, 0)

Executing BufWritePost Autocommands for "*"
autocommand call s:HandleBufWrite(fnamemodify(expand('<afile>'), ':p'))

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing BufWritePost Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing BufWritePost Autocommands for "<buffer=31>"
autocommand call s:write_triggered_update_tags(31)

chdir(/Users/tran/Documents/book-tc)
/Users/tran/Documents/book-tc
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
/Users/tran/Documents/book-tc
Executing CursorHold Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665854 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 28 seconds).
Executing CursorHold Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

autocommand if exists('*ale#lsp#Send') | call ale#hover#ShowTruncatedMessageAtCursor() | endif

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'))

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHold Autocommands for "*"
autocommand silent! checktime

Executing CursorHold Autocommands for "*"
autocommand call s:do_delayed_update()

Executing command: "'/usr/local/bin/zsh' '-c' ''/Users/tran/code/github/markdown2ctags/markdown2ctags.py'  -f - --sort=yes --sro=»  '/var/folders/jn/7jlp804x74j9y5zw57ch3v0m0000gn/T/nvimHTA9Wm/12.md''"


autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHold Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()


Executing command: "'/usr/local/bin/zsh' '-c' 'tmux -S /private/tmp/tmux-501/default display-message -p '#{window_zoomed_flag}''"


Executing command: "'/usr/local/bin/zsh' '-c' 'tmux -S /private/tmp/tmux-501/default select-pane -t '%19' -R'"


Executing FocusLost Autocommands for "*"
autocommand let s:focus_was_lost = 1

Executing CursorHold Autocommands for "*"
autocommand call xolox#misc#cursorhold#autocmd()

vim-misc 1.17.6: Checking handler xolox#session#auto_save_periodic with interval 60 and last run 1619665854 ..
vim-misc 1.17.6: Rate limiting handler xolox#session#auto_save_periodic (time until next run: 26 seconds).
Executing CursorHold Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

autocommand if exists('*ale#lsp#Send') | call ale#hover#ShowTruncatedMessageAtCursor() | endif

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'))

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHold Autocommands for "*"
autocommand silent! checktime

Executing CursorHold Autocommands for "*"
autocommand call s:do_delayed_update()

autocommand call s:AutoUpdate(fnamemodify(expand('<afile>'), ':p'), 0)

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing CursorHold Autocommands for "<buffer=31>"
autocommand call s:MarkdownRefreshSyntax(0)

autocommand call s:MarkdownSetupFolding()

Executing CursorHold Autocommands for "*"
autocommand call s:clear_message()


Executing FocusGained Autocommands for "*"
autocommand if mode() !~# '^c' | call s:Autocmd('FocusGained') | endif

Executing FocusGained Autocommands for "*"
autocommand if s:focus_was_lost | let s:focus_was_lost = 0 | call gitgutter#all(1) | endif

chdir(/Users/tran/Documents/book-tc)
chdir(internal_tools)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(internal_tools)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(deployment)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(odoo_basics)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(odoo_basics)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(odoo_basics)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(odoo_basics)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(odoo_basics)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(internal_tools)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(internal_tools)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(deployment)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(misc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(misc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(misc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(misc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing FocusGained Autocommands for "*"
autocommand call fugitive#ReloadStatus(-2, 0)


chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
not found in 'runtimepath': "autoload/xolox/shell.vim"
session.vim 2.13.1: Saved editing session 'book-tc' in 0.018 seconds.
session.vim 2.13.1: Saved editing session 'book-tc' to ~/.config/nvim/session/book-tc.vim.
vim-misc 1.17.6: Writing new contents of /Users/tran/.config/nvim/session/book-tc.vim.lock to temporary file /Users/tran/.config/nvim/session/book-tc.vim.lock.tmp ..
not found in 'runtimepath': "autoload/xolox/shell.vim"
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/.config/nvim/plugged/vim-misc/autoload/xolox/misc)
chdir(/Users/tran/Documents/book-tc)
line 67: sourcing "/Users/tran/.config/nvim/plugged/vim-misc/autoload/xolox/misc/escape.vim"
finished sourcing /Users/tran/.config/nvim/plugged/vim-misc/autoload/xolox/misc/escape.vim
continuing in function xolox#session#save_cmd[31]..<SNR>129_lock_session[5]..xolox#misc#persist#save[14]..xolox#misc#perm#update[17]..xolox#misc#perm#get[7]..xolox#misc#os#exec
vim-misc 1.17.6: Generated shell expression: (stat --format %U:%G:%a '/Users/tran/.config/nvim/session/book-tc.vim.lock') 1>'/var/folders/jn/7jlp804x74j9y5zw57ch3v0m0000gn/T/nvimHTA9Wm/14' 2>'/var/folders/jn/7jlp804x74j9y5zw57ch3v0m0000gn/T/nvimHTA9Wm/15'
vim-misc 1.17.6: Executing external command using system() function: sh -c '(stat --format %U:%G:%a '\''/Users/tran/.config/nvim/session/book-tc.vim.lock'\'') 1>'\''/var/folders/jn/7jlp804x74j9y5zw57ch3v0m0000gn/T/nvimHTA9Wm/14'\'' 2>'\''/var/folders/jn/7jlp804x74j9y5zw57ch3v0m0000gn/T/nvimHTA9Wm/15'\'''
Executing command: "'/usr/local/bin/zsh' '-c' 'sh -c '(stat --format %U:%G:%a '\''/Users/tran/.config/nvim/session/book-tc.vim.lock'\'') 1>'\''/var/folders/jn/7jlp804x74j9y5zw57ch3v0m0000gn/T/nvimHTA9Wm/14'\'' 2>'\''/var/folders/jn/7jlp804x74j9y5zw57ch3v0m0000gn/T/nvimHTA..."


vim-misc 1.17.6: File /Users/tran/.config/nvim/session/book-tc.vim.lock has owner tran, group staff, mode 0644.
not found in 'runtimepath': "autoload/xolox/shell.vim"
vim-misc 1.17.6: Generated shell expression: (chown 'tran':'staff' '/Users/tran/.config/nvim/session/book-tc.vim.lock.tmp') 1>'/var/folders/jn/7jlp804x74j9y5zw57ch3v0m0000gn/T/nvimHTA9Wm/16' 2>'/var/folders/jn/7jlp804x74j9y5zw57ch3v0m0000gn/T/nvimHTA9Wm/17'
vim-misc 1.17.6: Executing external command using system() function: sh -c '(chown '\''tran'\'':'\''staff'\'' '\''/Users/tran/.config/nvim/session/book-tc.vim.lock.tmp'\'') 1>'\''/var/folders/jn/7jlp804x74j9y5zw57ch3v0m0000gn/T/nvimHTA9Wm/16'\'' 2>'\''/var/folders/jn/7jlp804x74j9y5zw57ch3v0m0000gn/T/nvimHTA9Wm/17'\'''
Executing command: "'/usr/local/bin/zsh' '-c' 'sh -c '(chown '\''tran'\'':'\''staff'\'' '\''/Users/tran/.config/nvim/session/book-tc.vim.lock.tmp'\'') 1>'\''/var/folders/jn/7jlp804x74j9y5zw57ch3v0m0000gn/T/nvimHTA9Wm/16'\'' 2>'\''/var/folders/jn/7jlp804x74j9y5zw57ch3v0m00..."


not found in 'runtimepath': "autoload/xolox/shell.vim"
vim-misc 1.17.6: Generated shell expression: (chmod '0644' '/Users/tran/.config/nvim/session/book-tc.vim.lock.tmp') 1>'/var/folders/jn/7jlp804x74j9y5zw57ch3v0m0000gn/T/nvimHTA9Wm/18' 2>'/var/folders/jn/7jlp804x74j9y5zw57ch3v0m0000gn/T/nvimHTA9Wm/19'
vim-misc 1.17.6: Executing external command using system() function: sh -c '(chmod '\''0644'\'' '\''/Users/tran/.config/nvim/session/book-tc.vim.lock.tmp'\'') 1>'\''/var/folders/jn/7jlp804x74j9y5zw57ch3v0m0000gn/T/nvimHTA9Wm/18'\'' 2>'\''/var/folders/jn/7jlp804x74j9y5zw57ch3v0m0000gn/T/nvimHTA9Wm/19'\'''
Executing command: "'/usr/local/bin/zsh' '-c' 'sh -c '(chmod '\''0644'\'' '\''/Users/tran/.config/nvim/session/book-tc.vim.lock.tmp'\'') 1>'\''/var/folders/jn/7jlp804x74j9y5zw57ch3v0m0000gn/T/nvimHTA9Wm/18'\'' 2>'\''/var/folders/jn/7jlp804x74j9y5zw57ch3v0m0000gn/T/nvimHTA..."


vim-misc 1.17.6: Successfully set /Users/tran/.config/nvim/session/book-tc.vim.lock.tmp owner to tran, group to staff and permissions to 0644.
vim-misc 1.17.6: Replacing /Users/tran/.config/nvim/session/book-tc.vim.lock with /Users/tran/.config/nvim/session/book-tc.vim.lock.tmp ..
vim-misc 1.17.6: Successfully updated /Users/tran/.config/nvim/session/book-tc.vim.lock using atomic rename in 0.1 seconds.

Executing QuitPre Autocommands for "*"
autocommand call ale#events#QuitEvent(str2nr(expand('<abuf>')))

Executing QuitPre Autocommands for "*"
autocommand let s:vim_quitting = 1

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufWinLeave Autocommands for "*"
autocommand if s:can_diffoff(+expand('<abuf>')) && s:diff_window_count() == 2 |   call s:diffoff_all(s:Dir(+expand('<abuf>'))) | endif

Executing BufWinLeave Autocommands for "*"
autocommand execute getwinvar(+bufwinnr(+expand('<abuf>')), 'fugitive_leave')

Executing BufUnload Autocommands for "*"
autocommand call s:Autocmd('BufUnload', +expand('<abuf>'))

Executing BufUnload Autocommands for "<buffer=2>"
autocommand call s:MarkdownClearSyntaxVariables()

chdir(/Users/tran/Documents/book-tc)
chdir(notes)
chdir(/Users/tran/Documents/book-tc)
Executing BufUnload Autocommands for "*"
autocommand call s:Autocmd('BufUnload', +expand('<abuf>'))

Executing BufUnload Autocommands for "<buffer=31>"
autocommand call s:MarkdownClearSyntaxVariables()

Executing VimLeavePre Autocommands for "*"
autocommand call xolox#session#auto_save()

autocommand call xolox#session#auto_unlock()

Executing VimLeavePre Autocommands for "*"
autocommand call gutentags#on_vim_leave_pre()

Executing VimLeavePre Autocommands for "*"
autocommand let g:coc_vim_leaving = 1

Writing ShaDa file "/Users/tran/.local/share/nvim/shada/main.shada"
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/code/dotfiles/nvim)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/code/dotfiles/yabai)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/code/dotfiles/nvim/plugins)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/code/dotfiles/nvim)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/Documents/book-tc)
chdir(/Users/tran/code/dotfiles/nvim/plugins)
chdir(/Users/tran/Documents/book-tc)
Executing VimLeave Autocommands for "*"
autocommand for s:jobbuf in keys(s:edit_jobs) |   call writefile([], s:edit_jobs[s:jobbuf][0].temp . '.exit') |   redraw! |   call call('s:RunWait', remove(s:edit_jobs, s:jobbuf)) | endfor
